[[0.011426,{"lines":{"0":[["vvv@batmobile:~$                                                                 ",{}]],"1":[["                                                                                 ",{}]],"2":[["                                                                                 ",{}]],"3":[["                                                                                 ",{}]],"4":[["                                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]],"8":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"10":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"18":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"24":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"27":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"30":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"33":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"36":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"38":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":17,"y":0,"visible":true}}],[1.134591,{"lines":{"0":[["vvv@batmobile:~$ p                                                               ",{}]]},"cursor":{"x":18}}],[0.222672,{"lines":{"0":[["vvv@batmobile:~$ py                                                              ",{}]]},"cursor":{"x":19}}],[0.376889,{"lines":{"0":[["vvv@batmobile:~$ pyd                                                             ",{}]]},"cursor":{"x":20}}],[0.167405,{"lines":{"0":[["vvv@batmobile:~$ pydo                                                            ",{}]]},"cursor":{"x":21}}],[0.127658,{"lines":{"0":[["vvv@batmobile:~$ pydoc                                                           ",{}]]},"cursor":{"x":22}}],[0.343939,{"cursor":{"x":23}}],[0.112302,{"lines":{"0":[["vvv@batmobile:~$ pydoc d                                                         ",{}]]},"cursor":{"x":24}}],[0.055928,{"lines":{"0":[["vvv@batmobile:~$ pydoc di                                                        ",{}]]},"cursor":{"x":25}}],[0.160544,{"lines":{"0":[["vvv@batmobile:~$ pydoc dif                                                       ",{}]]},"cursor":{"x":26}}],[0.136143,{"lines":{"0":[["vvv@batmobile:~$ pydoc diff                                                      ",{}]]},"cursor":{"x":27}}],[0.072126,{"lines":{"0":[["vvv@batmobile:~$ pydoc diffl                                                     ",{}]]},"cursor":{"x":28}}],[0.063347,{"lines":{"0":[["vvv@batmobile:~$ pydoc diffli                                                    ",{}]]},"cursor":{"x":29}}],[0.144318,{"lines":{"0":[["vvv@batmobile:~$ pydoc difflib                                                   ",{}]]},"cursor":{"x":30}}],[0.416185,{"cursor":{"x":0,"y":1}}],[0.170824,{"lines":{"0":[["                                                                                 ",{}]]}}],[0.00031,{"lines":{"0":[["Help on module difflib:                                                          ",{}]],"2":[["NAME",{"bold":true}],["                                                                             ",{}]],"3":[["    difflib - Module difflib -- helpers for computing deltas between objects.    ",{}]],"5":[["FILE",{"bold":true}],["                                                                             ",{}]],"6":[["    /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/diffli",{}]],"7":[["b.py                                                                             ",{}]],"9":[["MODULE DOCS",{"bold":true}],["                                                                      ",{}]],"10":[["    http://docs.python.org/library/difflib                                       ",{}]],"12":[["DESCRIPTION",{"bold":true}],["                                                                      ",{}]],"13":[["    Function get_close_matches(word, possibilities, n=3, cutoff=0.6):            ",{}]],"14":[["        Use SequenceMatcher to return list of the best \"good enough\" matches.    ",{}]],"16":[["    Function context_diff(a, b):                                                 ",{}]],"17":[["        For two lists of strings, return a delta in context diff format.         ",{}]],"19":[["    Function ndiff(a, b):                                                        ",{}]],"20":[["        Return a delta: the difference between `a` and `b` (lists of strings).   ",{}]],"22":[["    Function restore(delta, which):                                              ",{}]],"23":[["        Return one of the two sequences that generated an ndiff delta.           ",{}]],"25":[["    Function unified_diff(a, b):                                                 ",{}]],"26":[["        For two lists of strings, return a delta in unified diff format.         ",{}]],"28":[["    Class SequenceMatcher:                                                       ",{}]],"29":[["        A flexible class for comparing pairs of sequences of any type.           ",{}]],"31":[["    Class Differ:                                                                ",{}]],"32":[["        For producing human-readable deltas from sequences of lines of text.     ",{}]],"34":[["    Class HtmlDiff:                                                              ",{}]],"35":[["        For producing HTML side by side comparison with change highlights.       ",{}]],"37":[["CLASSES",{"bold":true}],["                                                                          ",{}]],"38":[["    __builtin__.object                                                           ",{}]],"39":[["        HtmlDiff                                                                 ",{}]],"40":[["    __builtin__.tuple(__builtin__.object)                                        ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1,"y":41}}],[1.444841,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000737,{"lines":{"0":[["        Match                                                                    ",{}]],"1":[["    Differ                                                                       ",{}]],"2":[["    SequenceMatcher                                                              ",{}]],"3":[["                                                                                 ",{}]],"4":[["    class ",{}],["Differ",{"bold":true}],["                                                                 ",{}]],"5":[["     |  Differ is a class for comparing sequences of lines of text, and          ",{}]],"6":[["     |  producing human-readable differences or deltas.  Differ uses             ",{}]],"7":[["     |  SequenceMatcher both to compare sequences of lines, and to compare       ",{}]],"8":[["     |  sequences of characters within similar (near-matching) lines.            ",{}]],"9":[["     |                                                                           ",{}]],"10":[["     |  Each line of a Differ delta begins with a two-letter code:               ",{}]],"11":[["     |                                                                           ",{}]],"12":[["     |      '- '    line unique to sequence 1                                    ",{}]],"13":[["     |      '+ '    line unique to sequence 2                                    ",{}]],"14":[["     |      '  '    line common to both sequences                                ",{}]],"15":[["     |      '? '    line not present in either input sequence                    ",{}]],"16":[["     |                                                                           ",{}]],"17":[["     |  Lines beginning with '? ' attempt to guide the eye to intraline          ",{}]],"18":[["     |  differences, and were not present in either input sequence.  These lines ",{}]],"19":[["     |  can be confusing if the sequences contain tab characters.                ",{}]],"20":[["     |                                                                           ",{}]],"21":[["     |  Note that Differ makes no claim to produce a *minimal* diff.  To the     ",{}]],"22":[["     |  contrary, minimal diffs are often counter-intuitive, because they synch  ",{}]],"23":[["     |  up anywhere possible, sometimes accidental matches 100 pages apart.      ",{}]],"24":[["     |  Restricting synch points to contiguous matches preserves some notion of  ",{}]],"25":[["     |  locality, at the occasional cost of producing a longer diff.             ",{}]],"26":[["     |                                                                           ",{}]],"27":[["     |  Example: Comparing two texts.                                            ",{}]],"28":[["     |                                                                           ",{}]],"29":[["     |  First we set up the texts, sequences of individual single-line strings   ",{}]],"30":[["     |  ending with newlines (such sequences can also be obtained from the       ",{}]],"31":[["     |  `readlines()` method of file-like objects):                              ",{}]],"32":[["     |                                                                           ",{}]],"33":[["     |  >>> text1 = '''  1. Beautiful is better than ugly.                       ",{}]],"34":[["     |  ...   2. Explicit is better than implicit.                               ",{}]],"35":[["     |  ...   3. Simple is better than complex.                                  ",{}]],"36":[["     |  ...   4. Complex is better than complicated.                             ",{}]],"37":[["     |  ... '''.splitlines(1)                                                    ",{}]],"38":[["     |  >>> len(text1)                                                           ",{}]],"39":[["     |  4                                                                        ",{}]],"40":[["     |  >>> text1[0][-1]                                                         ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.391907,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000734,{"lines":{"0":[["     |  '\\n'                                                                     ",{}]],"1":[["     |  >>> text2 = '''  1. Beautiful is better than ugly.                       ",{}]],"2":[["     |  ...   3.   Simple is better than complex.                                ",{}]],"3":[["     |  ...   4. Complicated is better than complex.                             ",{}]],"4":[["     |  ...   5. Flat is better than nested.                                     ",{}]],"5":[["     |  ... '''.splitlines(1)                                                    ",{}]],"6":[["     |                                                                           ",{}]],"7":[["     |  Next we instantiate a Differ object:                                     ",{}]],"8":[["     |                                                                           ",{}]],"9":[["     |  >>> d = Differ()                                                         ",{}]],"10":[["     |                                                                           ",{}]],"11":[["     |  Note that when instantiating a Differ object we may pass functions to    ",{}]],"12":[["     |  filter out line and character 'junk'.  See Differ.__init__ for details.  ",{}]],"13":[["     |                                                                           ",{}]],"14":[["     |  Finally, we compare the two:                                             ",{}]],"15":[["     |                                                                           ",{}]],"16":[["     |  >>> result = list(d.compare(text1, text2))                               ",{}]],"17":[["     |                                                                           ",{}]],"18":[["     |  'result' is a list of strings, so let's pretty-print it:                 ",{}]],"19":[["     |                                                                           ",{}]],"20":[["     |  >>> from pprint import pprint as _pprint                                 ",{}]],"21":[["     |  >>> _pprint(result)                                                      ",{}]],"22":[["     |  ['    1. Beautiful is better than ugly.\\n',                              ",{}]],"23":[["     |   '-   2. Explicit is better than implicit.\\n',                           ",{}]],"24":[["     |   '-   3. Simple is better than complex.\\n',                              ",{}]],"25":[["     |   '+   3.   Simple is better than complex.\\n',                            ",{}]],"26":[["     |   '?     ++\\n',                                                           ",{}]],"27":[["     |   '-   4. Complex is better than complicated.\\n',                         ",{}]],"28":[["     |   '?            ^                     ---- ^\\n',                          ",{}]],"29":[["     |   '+   4. Complicated is better than complex.\\n',                         ",{}]],"30":[["     |   '?           ++++ ^                      ^\\n',                          ",{}]],"31":[["     |   '+   5. Flat is better than nested.\\n']                                 ",{}]],"33":[["     |  As a single multi-line string it looks like this:                        ",{}]],"34":[["     |                                                                           ",{}]],"35":[["     |  >>> print ''.join(result),                                               ",{}]],"36":[["     |      1. Beautiful is better than ugly.                                    ",{}]],"37":[["     |  -   2. Explicit is better than implicit.                                 ",{}]],"38":[["     |  -   3. Simple is better than complex.                                    ",{}]],"39":[["     |  +   3.   Simple is better than complex.                                  ",{}]],"40":[["     |  ?     ++                                                                 ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[1.415652,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000794,{"lines":{"0":[["     |  -   4. Complex is better than complicated.                               ",{}]],"1":[["     |  ?            ^                     ---- ^                                ",{}]],"2":[["     |  +   4. Complicated is better than complex.                               ",{}]],"3":[["     |  ?           ++++ ^                      ^                                ",{}]],"4":[["     |  +   5. Flat is better than nested.                                       ",{}]],"5":[["     |                                                                           ",{}]],"6":[["     |  Methods:                                                                 ",{}]],"7":[["     |                                                                           ",{}]],"8":[["     |  __init__(linejunk=None, charjunk=None)                                   ",{}]],"9":[["     |      Construct a text differencer, with optional filters.                 ",{}]],"11":[["     |  compare(a, b)                                                            ",{}]],"12":[["     |      Compare two sequences of lines; generate the resulting delta.        ",{}]],"14":[["     |  Methods defined here:                                                    ",{}]],"16":[["     |  ",{}],["__init__",{"bold":true}],["(self, linejunk=None, charjunk=None)                             ",{}]],"17":[["     |      Construct a text differencer, with optional filters.                 ",{}]],"18":[["     |                                                                           ",{}]],"19":[["     |      The two optional keyword parameters are for filter functions:        ",{}]],"20":[["     |                                                                           ",{}]],"21":[["     |      - `linejunk`: A function that should accept a single string argument,",{}]],"22":[["     |        and return true iff the string is junk. The module-level function  ",{}]],"23":[["     |        `IS_LINE_JUNK` may be used to filter out lines without visible     ",{}]],"24":[["     |        characters, except for at most one splat ('#').  It is recommended ",{}]],"25":[["     |        to leave linejunk None; as of Python 2.3, the underlying           ",{}]],"26":[["     |        SequenceMatcher class has grown an adaptive notion of \"noise\" lines",{}]],"27":[["     |        that's better than any static definition the author has ever been  ",{}]],"28":[["     |        able to craft.                                                     ",{}]],"29":[["     |                                                                           ",{}]],"30":[["     |      - `charjunk`: A function that should accept a string of length 1. The",{}]],"31":[["     |        module-level function `IS_CHARACTER_JUNK` may be used to filter out",{}]],"32":[["     |        whitespace characters (a blank or tab; **note**: bad idea to includ",{}]],"33":[["e                                                                                ",{}]],"34":[["     |        newline in this!).  Use of IS_CHARACTER_JUNK is recommended.       ",{}]],"35":[["     |                                                                           ",{}]],"36":[["     |  ",{}],["compare",{"bold":true}],["(self, a, b)                                                      ",{}]],"37":[["     |      Compare two sequences of lines; generate the resulting delta.        ",{}]],"38":[["     |                                                                           ",{}]],"39":[["     |      Each sequence must contain individual single-line strings ending with",{}]],"40":[["     |      newlines. Such sequences can be obtained from the `readlines()` metho",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[1.503097,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.001964,{"lines":{"0":[["3, lineterm='\\n')                                                                ",{}]],"1":[["        Compare two sequences of lines; generate the delta as a unified diff.    ",{}]],"2":[["                                                                                 ",{}]],"3":[["        Unified diffs are a compact way of showing line changes and a few        ",{}]],"4":[["        lines of context.  The number of context lines is set by 'n' which       ",{}]],"5":[["        defaults to three.                                                       ",{}]],"6":[["                                                                                 ",{}]],"7":[["        By default, the diff control lines (those with ---, +++, or @@) are      ",{}]],"8":[["        created with a trailing newline.  This is helpful so that inputs         ",{}]],"9":[["        created from file.readlines() result in diffs that are suitable for      ",{}]],"10":[["        file.writelines() since both the inputs and outputs have trailing        ",{}]],"11":[["        newlines.                                                                ",{}]],"12":[["                                                                                 ",{}]],"13":[["        For inputs that do not have trailing newlines, set the lineterm          ",{}]],"14":[["        argument to \"\" so that the output will be uniformly newline free.        ",{}]],"15":[["                                                                                 ",{}]],"16":[["        The unidiff format normally has a header for filenames and modification  ",{}]],"17":[["        times.  Any or all of these may be specified using strings for           ",{}]],"18":[["        'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.                  ",{}]],"19":[["        The modification times are normally expressed in the ISO 8601 format.    ",{}]],"20":[["                                                                                 ",{}]],"21":[["        Example:                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["        >>> for line in unified_diff('one two three four'.split(),               ",{}]],"24":[["        ...             'zero one tree four'.split(), 'Original', 'Current',     ",{}]],"25":[["        ...             '2005-01-26 23:30:50', '2010-04-02 10:20:52',            ",{}]],"26":[["        ...             lineterm=''):                                            ",{}]],"27":[["        ...     print line                  # doctest: +NORMALIZE_WHITESPACE     ",{}]],"28":[["        --- Original        2005-01-26 23:30:50                                  ",{}]],"29":[["        +++ Current         2010-04-02 10:20:52                                  ",{}]],"30":[["        @@ -1,4 +1,4 @@                                                          ",{}]],"31":[["        +zero                                                                    ",{}]],"32":[["         one                                                                     ",{}]],"33":[["        -two                                                                     ",{}]],"34":[["        -three                                                                   ",{}]],"35":[["        +tree                                                                    ",{}]],"36":[["         four                                                                    ",{}]],"37":[["                                                                                 ",{}]],"38":[["DATA",{"bold":true}],["                                                                             ",{}]],"39":[["    ",{}],["__all__",{"bold":true}],[" = ['get_close_matches', 'ndiff', 'restore', 'SequenceMatcher',...    ",{}]],"40":[["                                                                                 ",{}]],"41":[["(END) ",{"inverse":true}],["                                                                           ",{}]]},"cursor":{"x":6}}],[3.610163,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.0008259999999999999,{"lines":{"0":[["Help on module difflib:                                                          ",{}]],"1":[["                                                                                 ",{}]],"2":[["NAME",{"bold":true}],["                                                                             ",{}]],"3":[["    difflib - Module difflib -- helpers for computing deltas between objects.    ",{}]],"4":[["                                                                                 ",{}]],"5":[["FILE",{"bold":true}],["                                                                             ",{}]],"6":[["    /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/diffli",{}]],"7":[["b.py                                                                             ",{}]],"8":[["                                                                                 ",{}]],"9":[["MODULE DOCS",{"bold":true}],["                                                                      ",{}]],"10":[["    http://docs.python.org/library/difflib                                       ",{}]],"11":[["                                                                                 ",{}]],"12":[["DESCRIPTION",{"bold":true}],["                                                                      ",{}]],"13":[["    Function get_close_matches(word, possibilities, n=3, cutoff=0.6):            ",{}]],"14":[["        Use SequenceMatcher to return list of the best \"good enough\" matches.    ",{}]],"16":[["    Function context_diff(a, b):                                                 ",{}]],"17":[["        For two lists of strings, return a delta in context diff format.         ",{}]],"18":[["                                                                                 ",{}]],"19":[["    Function ndiff(a, b):                                                        ",{}]],"20":[["        Return a delta: the difference between `a` and `b` (lists of strings).   ",{}]],"21":[["                                                                                 ",{}]],"22":[["    Function restore(delta, which):                                              ",{}]],"23":[["        Return one of the two sequences that generated an ndiff delta.           ",{}]],"24":[["                                                                                 ",{}]],"25":[["    Function unified_diff(a, b):                                                 ",{}]],"26":[["        For two lists of strings, return a delta in unified diff format.         ",{}]],"27":[["                                                                                 ",{}]],"28":[["    Class SequenceMatcher:                                                       ",{}]],"29":[["        A flexible class for comparing pairs of sequences of any type.           ",{}]],"30":[["                                                                                 ",{}]],"31":[["    Class Differ:                                                                ",{}]],"32":[["        For producing human-readable deltas from sequences of lines of text.     ",{}]],"33":[["                                                                                 ",{}]],"34":[["    Class HtmlDiff:                                                              ",{}]],"35":[["        For producing HTML side by side comparison with change highlights.       ",{}]],"36":[["                                                                                 ",{}]],"37":[["CLASSES",{"bold":true}],["                                                                          ",{}]],"38":[["    __builtin__.object                                                           ",{}]],"39":[["        HtmlDiff                                                                 ",{}]],"40":[["    __builtin__.tuple(__builtin__.object)                                        ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[1.263623,{"lines":{"0":[["vvv@batmobile:~$ pydoc difflib                                                   ",{}]],"2":[["                                                                                 ",{}]],"3":[["                                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"10":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"38":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":0,"y":1}}],[0.006281,{"lines":{"2":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17,"y":2}}],[2.266227,{"lines":{"2":[["vvv@batmobile:~$ w                                                               ",{}]]},"cursor":{"x":18}}],[0.055401,{"lines":{"2":[["vvv@batmobile:~$ wh                                                              ",{}]]},"cursor":{"x":19}}],[0.07266,{"lines":{"2":[["vvv@batmobile:~$ whi                                                             ",{}]]},"cursor":{"x":20}}],[0.088378,{"lines":{"2":[["vvv@batmobile:~$ whic                                                            ",{}]]},"cursor":{"x":21}}],[0.071634,{"lines":{"2":[["vvv@batmobile:~$ which                                                           ",{}]]},"cursor":{"x":22}}],[0.111712,{"cursor":{"x":23}}],[0.096624,{"lines":{"2":[["vvv@batmobile:~$ which p                                                         ",{}]]},"cursor":{"x":24}}],[0.183302,{"lines":{"2":[["vvv@batmobile:~$ which py                                                        ",{}]]},"cursor":{"x":25}}],[0.417133,{"lines":{"2":[["vvv@batmobile:~$ which pyd                                                       ",{}]]},"cursor":{"x":26}}],[0.055577,{"lines":{"2":[["vvv@batmobile:~$ which pydo                                                      ",{}]]},"cursor":{"x":27}}],[0.135745,{"lines":{"2":[["vvv@batmobile:~$ which pydoc                                                     ",{}]]},"cursor":{"x":28}}],[0.175943,{"cursor":{"x":0,"y":3}}],[0.004555999999999999,{"lines":{"3":[["/usr/bin/pydoc                                                                   ",{}]],"4":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17,"y":4}}],[0.979565,{"lines":{"4":[["vvv@batmobile:~$ f                                                               ",{}]]},"cursor":{"x":18}}],[0.047659,{"lines":{"4":[["vvv@batmobile:~$ fi                                                              ",{}]]},"cursor":{"x":19}}],[0.064557,{"lines":{"4":[["vvv@batmobile:~$ fil                                                             ",{}]]},"cursor":{"x":20}}],[0.08790000000000001,{"lines":{"4":[["vvv@batmobile:~$ file                                                            ",{}]]},"cursor":{"x":21}}],[0.152192,{"cursor":{"x":22}}],[1.056151,{"lines":{"4":[["vvv@batmobile:~$ file `                                                          ",{}]]},"cursor":{"x":23}}],[0.392407,{"lines":{"4":[["vvv@batmobile:~$ file `!                                                         ",{}]]},"cursor":{"x":24}}],[0.215809,{"lines":{"4":[["vvv@batmobile:~$ file `!!                                                        ",{}]]},"cursor":{"x":25}}],[0.45626,{"lines":{"4":[["vvv@batmobile:~$ file `!!`                                                       ",{}]]},"cursor":{"x":26}}],[0.391338,{"cursor":{"x":0,"y":5}}],[9.7e-05,{"lines":{"5":[["file `which pydoc`                                                               ",{}]]},"cursor":{"y":6}}],[0.046747,{"lines":{"6":[["/usr/bin/pydoc: Python script, ASCII text executable                             ",{}]]},"cursor":{"y":7}}],[0.000558,{"lines":{"7":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17}}],[4.329898,{"lines":{"7":[["vvv@batmobile:~$ l                                                               ",{}]]},"cursor":{"x":18}}],[0.047459,{"lines":{"7":[["vvv@batmobile:~$ le                                                              ",{}]]},"cursor":{"x":19}}],[0.209263,{"lines":{"7":[["vvv@batmobile:~$ les                                                             ",{}]]},"cursor":{"x":20}}],[0.135322,{"lines":{"7":[["vvv@batmobile:~$ less                                                            ",{}]]},"cursor":{"x":21}}],[0.120118,{"cursor":{"x":22}}],[0.09623,{"lines":{"7":[["vvv@batmobile:~$ less /                                                          ",{}]]},"cursor":{"x":23}}],[0.240395,{"lines":{"7":[["vvv@batmobile:~$ less /u                                                         ",{}]]},"cursor":{"x":24}}],[0.06338100000000001,{"lines":{"7":[["vvv@batmobile:~$ less /us                                                        ",{}]]},"cursor":{"x":25}}],[0.095628,{"lines":{"7":[["vvv@batmobile:~$ less /usr                                                       ",{}]]},"cursor":{"x":26}}],[0.087756,{"lines":{"7":[["vvv@batmobile:~$ less /usr/                                                      ",{}]]},"cursor":{"x":27}}],[0.272205,{"lines":{"7":[["vvv@batmobile:~$ less /usr/b                                                     ",{}]]},"cursor":{"x":28}}],[0.056835,{"lines":{"7":[["vvv@batmobile:~$ less /usr/bi                                                    ",{}]]},"cursor":{"x":29}}],[0.079337,{"lines":{"7":[["vvv@batmobile:~$ less /usr/bin                                                   ",{}]]},"cursor":{"x":30}}],[0.144333,{"lines":{"7":[["vvv@batmobile:~$ less /usr/bin/                                                  ",{}]]},"cursor":{"x":31}}],[0.319728,{"lines":{"7":[["vvv@batmobile:~$ less /usr/bin/p                                                 ",{}]]},"cursor":{"x":32}}],[0.184559,{"lines":{"7":[["vvv@batmobile:~$ less /usr/bin/py                                                ",{}]]},"cursor":{"x":33}}],[0.135543,{"lines":{"7":[["vvv@batmobile:~$ less /usr/bin/pyd                                               ",{}]]},"cursor":{"x":34}}],[0.088188,{"lines":{"7":[["vvv@batmobile:~$ less /usr/bin/pydo                                              ",{}]]},"cursor":{"x":35}}],[0.111995,{"lines":{"7":[["vvv@batmobile:~$ less /usr/bin/pydoc                                             ",{}]]},"cursor":{"x":36}}],[0.240547,{"cursor":{"x":0,"y":8}}],[0.005253,{"lines":{"0":[["                                                                                 ",{}]],"2":[["                                                                                 ",{}]],"3":[["#!/usr/bin/python                                                                ",{}]],"4":[["                                                                                 ",{}]],"5":[["import sys, os                                                                   ",{}]],"6":[["import glob, re                                                                  ",{}]],"7":[["                                                                                 ",{}]],"8":[["partA = \"\"\"\\                                                                     ",{}]],"9":[["python version %d.%d.%d can't run %s.  Try the alternative(s):                   ",{}]],"11":[["\"\"\"                                                                              ",{}]],"12":[["partB = \"\"\"                                                                      ",{}]],"13":[["Run \"man python\" for more information about multiple version support in          ",{}]],"14":[["Mac OS X.                                                                        ",{}]],"15":[["\"\"\"                                                                              ",{}]],"17":[["sys.stderr.write(partA % (sys.version_info[:3] + (sys.argv[0],)))                ",{}]],"19":[["dir, base = os.path.split(sys.argv[0])                                           ",{}]],"20":[["specialcase = (base == 'python-config')                                          ",{}]],"21":[["if specialcase:                                                                  ",{}]],"22":[["    pat = \"python*-config\"                                                       ",{}]],"23":[["else:                                                                            ",{}]],"24":[["    pat = base + '*'                                                             ",{}]],"25":[["g = glob.glob(os.path.join(dir, pat))                                            ",{}]],"26":[["# match a single digit, dot and possibly multiple digits, because we might       ",{}]],"27":[["# have 2to32.6, where the program is 2to3 and the version is 2.6.                ",{}]],"28":[["vpat = re.compile(\"\\d\\.\\d+\")                                                     ",{}]],"29":[["n = 0                                                                            ",{}]],"30":[["for i in g:                                                                      ",{}]],"31":[["    vers = vpat.search(i)                                                        ",{}]],"32":[["    if vers is None:                                                             ",{}]],"33":[["        continue                                                                 ",{}]],"34":[["    sys.stderr.write(\"%s (uses python %s)\\n\" % (i, i[vers.start():vers.end()]))  ",{}]],"35":[["    n = 1                                                                        ",{}]],"36":[["if n == 0:                                                                       ",{}]],"37":[["    sys.stderr.write(\"(Error: no alternatives found)\\n\")                         ",{}]],"39":[["sys.stderr.write(partB)                                                          ",{}]],"40":[["sys.exit(1)                                                                      ",{}]],"41":[["/usr/bin/pydoc (END) ",{"inverse":true}],["                                                            ",{}]]},"cursor":{"x":21,"y":41}}],[2.859,{"lines":{"0":[["vvv@batmobile:~$ pydoc difflib                                                   ",{}]],"2":[["vvv@batmobile:~$ which pydoc                                                     ",{}]],"3":[["/usr/bin/pydoc                                                                   ",{}]],"4":[["vvv@batmobile:~$ file `!!`                                                       ",{}]],"5":[["file `which pydoc`                                                               ",{}]],"6":[["/usr/bin/pydoc: Python script, ASCII text executable                             ",{}]],"7":[["vvv@batmobile:~$ less /usr/bin/pydoc                                             ",{}]],"8":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"24":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"27":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"30":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"33":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"36":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":0,"y":8}}],[0.000692,{"lines":{"8":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17}}],[2.46388,{"lines":{"8":[["vvv@batmobile:~$ #                                                               ",{}]]},"cursor":{"x":18}}],[0.216025,{"cursor":{"x":19}}],[0.535853,{"lines":{"8":[["vvv@batmobile:~$ # W                                                             ",{}]]},"cursor":{"x":20}}],[0.2322,{"lines":{"8":[["vvv@batmobile:~$ # Wh                                                            ",{}]]},"cursor":{"x":21}}],[0.487971,{"lines":{"8":[["vvv@batmobile:~$ # Wha                                                           ",{}]]},"cursor":{"x":22}}],[0.352817,{"lines":{"8":[["vvv@batmobile:~$ # What                                                          ",{}]]},"cursor":{"x":23}}],[0.167161,{"lines":{"8":[["vvv@batmobile:~$ # Whate                                                         ",{}]]},"cursor":{"x":24}}],[0.296118,{"lines":{"8":[["vvv@batmobile:~$ # Whatev                                                        ",{}]]},"cursor":{"x":25}}],[0.104001,{"lines":{"8":[["vvv@batmobile:~$ # Whateve                                                       ",{}]]},"cursor":{"x":26}}],[0.152829,{"lines":{"8":[["vvv@batmobile:~$ # Whatever                                                      ",{}]]},"cursor":{"x":27}}],[0.135567,{"lines":{"8":[["vvv@batmobile:~$ # Whatever.                                                     ",{}]]},"cursor":{"x":28}}],[0.287792,{"cursor":{"x":0,"y":9}}],[0.000222,{"lines":{"9":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17}}],[2.088251,{"lines":{"9":[["vvv@batmobile:~$ p                                                               ",{}]]},"cursor":{"x":18}}],[0.192784,{"lines":{"9":[["vvv@batmobile:~$ py                                                              ",{}]]},"cursor":{"x":19}}],[0.560127,{"lines":{"0":[["vvv@batmobile:~$ py                                                              ",{}]],"2":[["                                                                                 ",{}]],"3":[["                                                                                 ",{}]],"4":[["                                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]],"8":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]]},"cursor":{"y":0}}],[0.407156,{"lines":{"0":[["vvv@batmobile:~$ pyd                                                             ",{}]]},"cursor":{"x":20}}],[0.088033,{"lines":{"0":[["vvv@batmobile:~$ pydo                                                            ",{}]]},"cursor":{"x":21}}],[0.080165,{"lines":{"0":[["vvv@batmobile:~$ pydoc                                                           ",{}]]},"cursor":{"x":22}}],[0.424512,{"cursor":{"x":23}}],[0.968451,{"lines":{"0":[["vvv@batmobile:~$ pydoc o                                                         ",{}]]},"cursor":{"x":24}}],[0.047474,{"lines":{"0":[["vvv@batmobile:~$ pydoc op                                                        ",{}]]},"cursor":{"x":25}}],[0.288249,{"lines":{"0":[["vvv@batmobile:~$ pydoc opt                                                       ",{}]]},"cursor":{"x":26}}],[0.239719,{"lines":{"0":[["vvv@batmobile:~$ pydoc optp                                                      ",{}]]},"cursor":{"x":27}}],[0.072565,{"lines":{"0":[["vvv@batmobile:~$ pydoc optpa                                                     ",{}]]},"cursor":{"x":28}}],[0.215366,{"lines":{"0":[["vvv@batmobile:~$ pydoc optpar                                                    ",{}]]},"cursor":{"x":29}}],[0.136278,{"lines":{"0":[["vvv@batmobile:~$ pydoc optpars                                                   ",{}]]},"cursor":{"x":30}}],[0.08806700000000001,{"lines":{"0":[["vvv@batmobile:~$ pydoc optparse                                                  ",{}]]},"cursor":{"x":31}}],[0.384169,{"cursor":{"x":0,"y":1}}],[0.127367,{"lines":{"0":[["                                                                                 ",{}]]}}],[0.000205,{"lines":{"0":[["Help on module optparse:                                                         ",{}]],"2":[["NAME",{"bold":true}],["                                                                             ",{}]],"3":[["    optparse - A powerful, extensible, and easy-to-use option parser.            ",{}]],"5":[["FILE",{"bold":true}],["                                                                             ",{}]],"6":[["    /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/optpar",{}]],"7":[["se.py                                                                            ",{}]],"9":[["MODULE DOCS",{"bold":true}],["                                                                      ",{}]],"10":[["    http://docs.python.org/library/optparse                                      ",{}]],"12":[["DESCRIPTION",{"bold":true}],["                                                                      ",{}]],"13":[["    By Greg Ward <gward@python.net>                                              ",{}]],"15":[["    Originally distributed as Optik.                                             ",{}]],"17":[["    For support, use the optik-users@lists.sourceforge.net mailing list          ",{}]],"18":[["    (http://lists.sourceforge.net/lists/listinfo/optik-users).                   ",{}]],"20":[["    Simple usage example:                                                        ",{}]],"22":[["       from optparse import OptionParser                                         ",{}]],"24":[["       parser = OptionParser()                                                   ",{}]],"25":[["       parser.add_option(\"-f\", \"--file\", dest=\"filename\",                        ",{}]],"26":[["                         help=\"write report to FILE\", metavar=\"FILE\")            ",{}]],"27":[["       parser.add_option(\"-q\", \"--quiet\",                                        ",{}]],"28":[["                         action=\"store_false\", dest=\"verbose\", default=True,     ",{}]],"29":[["                         help=\"don't print status messages to stdout\")           ",{}]],"31":[["       (options, args) = parser.parse_args()                                     ",{}]],"33":[["CLASSES",{"bold":true}],["                                                                          ",{}]],"34":[["    exceptions.Exception(exceptions.BaseException)                               ",{}]],"35":[["        OptParseError                                                            ",{}]],"36":[["            BadOptionError                                                       ",{}]],"37":[["            OptionError                                                          ",{}]],"38":[["                OptionConflictError                                              ",{}]],"39":[["            OptionValueError                                                     ",{}]],"40":[["    HelpFormatter                                                                ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1,"y":41}}],[3.056825,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.001107,{"lines":{"0":[["        IndentedHelpFormatter                                                    ",{}]],"1":[["        TitledHelpFormatter                                                      ",{}]],"2":[["    Option                                                                       ",{}]],"3":[["    OptionContainer                                                              ",{}]],"4":[["        OptionGroup                                                              ",{}]],"5":[["        OptionParser                                                             ",{}]],"6":[["    Values                                                                       ",{}]],"7":[["                                                                                 ",{}]],"8":[["    class ",{}],["BadOptionError",{"bold":true}],["(OptParseError)                                          ",{}]],"9":[["     |  Raised if an invalid option is seen on the command line.                 ",{}]],"10":[["     |                                                                           ",{}]],"11":[["     |  Method resolution order:                                                 ",{}]],"12":[["     |      BadOptionError                                                       ",{}]],"13":[["     |      OptParseError                                                        ",{}]],"14":[["     |      exceptions.Exception                                                 ",{}]],"15":[["     |      exceptions.BaseException                                             ",{}]],"16":[["     |      __builtin__.object                                                   ",{}]],"17":[["     |                                                                           ",{}]],"18":[["     |  Methods defined here:                                                    ",{}]],"19":[["     |                                                                           ",{}]],"20":[["     |  ",{}],["__init__",{"bold":true}],["(self, opt_str)                                                  ",{}]],"21":[["     |                                                                           ",{}]],"22":[["     |  ",{}],["__str__",{"bold":true}],["(self)                                                            ",{}]],"23":[["     |                                                                           ",{}]],"24":[["     |  ----------------------------------------------------------------------   ",{}]],"25":[["     |  Data descriptors inherited from OptParseError:                           ",{}]],"26":[["     |                                                                           ",{}]],"27":[["     |  ",{}],["__weakref__",{"bold":true}],["                                                              ",{}]],"28":[["     |      list of weak references to the object (if defined)                   ",{}]],"29":[["     |                                                                           ",{}]],"30":[["     |  ----------------------------------------------------------------------   ",{}]],"31":[["     |  Data and other attributes inherited from exceptions.Exception:           ",{}]],"32":[["     |                                                                           ",{}]],"33":[["     |  ",{}],["__new__",{"bold":true}],[" = <built-in method __new__ of type object>                       ",{}]],"34":[["     |      T.__new__(S, ...) -> a new object with type S, a subtype of T        ",{}]],"35":[["     |                                                                           ",{}]],"36":[["     |  ----------------------------------------------------------------------   ",{}]],"37":[["     |  Methods inherited from exceptions.BaseException:                         ",{}]],"38":[["     |                                                                           ",{}]],"39":[["     |  ",{}],["__delattr__",{"bold":true}],["(...)                                                         ",{}]],"40":[["     |      x.__delattr__('name') <==> del x.name                                ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[1.519612,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000383,{"lines":{"0":[["     |                                                                           ",{}]],"1":[["     |  ",{}],["__getattribute__",{"bold":true}],["(...)                                                    ",{}]],"2":[["     |      x.__getattribute__('name') <==> x.name                               ",{}]],"3":[["     |                                                                           ",{}]],"4":[["     |  ",{}],["__getitem__",{"bold":true}],["(...)                                                         ",{}]],"5":[["     |      x.__getitem__(y) <==> x[y]                                           ",{}]],"6":[["     |                                                                           ",{}]],"7":[["     |  ",{}],["__getslice__",{"bold":true}],["(...)                                                        ",{}]],"8":[["     |      x.__getslice__(i, j) <==> x[i:j]                                     ",{}]],"9":[["     |                                                                           ",{}]],"10":[["     |      Use of negative indices is not supported.                            ",{}]],"11":[["     |                                                                           ",{}]],"12":[["     |  ",{}],["__reduce__",{"bold":true}],["(...)                                                          ",{}]],"13":[["     |                                                                           ",{}]],"14":[["     |  ",{}],["__repr__",{"bold":true}],["(...)                                                            ",{}]],"15":[["     |      x.__repr__() <==> repr(x)                                            ",{}]],"16":[["     |                                                                           ",{}]],"17":[["     |  ",{}],["__setattr__",{"bold":true}],["(...)                                                         ",{}]],"18":[["     |      x.__setattr__('name', value) <==> x.name = value                     ",{}]],"20":[["     |  ",{}],["__setstate__",{"bold":true}],["(...)                                                        ",{}]],"22":[["     |  ",{}],["__unicode__",{"bold":true}],["(...)                                                         ",{}]],"25":[["     |  Data descriptors inherited from exceptions.BaseException:                ",{}]],"27":[["     |  ",{}],["__dict__",{"bold":true}],["                                                                 ",{}]],"28":[["     |                                                                           ",{}]],"29":[["     |  ",{}],["args",{"bold":true}],["                                                                     ",{}]],"30":[["     |                                                                           ",{}]],"31":[["     |  ",{}],["message",{"bold":true}],["                                                                  ",{}]],"32":[["                                                                                 ",{}]],"33":[["    class ",{}],["HelpFormatter",{"bold":true}],["                                                          ",{}]],"34":[["     |  Abstract base class for formatting option help.  OptionParser            ",{}]],"35":[["     |  instances should use one of the HelpFormatter subclasses for             ",{}]],"36":[["     |  formatting help; by default IndentedHelpFormatter is used.               ",{}]],"37":[["     |                                                                           ",{}]],"38":[["     |  Instance attributes:                                                     ",{}]],"39":[["     |    parser : OptionParser                                                  ",{}]],"40":[["     |      the controlling OptionParser instance                                ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[3.471385,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.00033,{"lines":{"0":[["     |    indent_increment : int                                                 ",{}]],"1":[["     |      the number of columns to indent per nesting level                    ",{}]],"2":[["     |    max_help_position : int                                                ",{}]],"3":[["     |      the maximum starting column for option help text                     ",{}]],"4":[["     |    help_position : int                                                    ",{}]],"5":[["     |      the calculated starting column for option help text;                 ",{}]],"6":[["     |      initially the same as the maximum                                    ",{}]],"7":[["     |    width : int                                                            ",{}]],"8":[["     |      total number of columns for output (pass None to constructor for     ",{}]],"9":[["     |      this value to be taken from the $COLUMNS environment variable)       ",{}]],"10":[["     |    level : int                                                            ",{}]],"11":[["     |      current indentation level                                            ",{}]],"12":[["     |    current_indent : int                                                   ",{}]],"13":[["     |      current indentation level (in columns)                               ",{}]],"14":[["     |    help_width : int                                                       ",{}]],"15":[["     |      number of columns available for option help text (calculated)        ",{}]],"16":[["     |    default_tag : str                                                      ",{}]],"17":[["     |      text to replace with each option's default value, \"%default\"         ",{}]],"18":[["     |      by default.  Set to false value to disable default value expansion.  ",{}]],"19":[["     |    option_strings : { Option : str }                                      ",{}]],"20":[["     |      maps Option instances to the snippet of help text explaining         ",{}]],"21":[["     |      the syntax of that option, e.g. \"-h, --help\" or                      ",{}]],"22":[["     |      \"-fFILE, --file=FILE\"                                                ",{}]],"23":[["     |    _short_opt_fmt : str                                                   ",{}]],"24":[["     |      format string controlling how short options with values are          ",{}]],"25":[["     |      printed in help text.  Must be either \"%s%s\" (\"-fFILE\") or           ",{}]],"26":[["     |      \"%s %s\" (\"-f FILE\"), because those are the two syntaxes that         ",{}]],"27":[["     |      Optik supports.                                                      ",{}]],"28":[["     |    _long_opt_fmt : str                                                    ",{}]],"29":[["     |      similar but for long options; must be either \"%s %s\" (\"--file FILE\") ",{}]],"30":[["     |      or \"%s=%s\" (\"--file=FILE\").                                          ",{}]],"31":[["     |                                                                           ",{}]],"32":[["     |  Methods defined here:                                                    ",{}]],"33":[["     |                                                                           ",{}]],"34":[["     |  ",{}],["__init__",{"bold":true}],["(self, indent_increment, max_help_position, width, short_first)  ",{}]],"35":[["     |                                                                           ",{}]],"36":[["     |  ",{}],["dedent",{"bold":true}],["(self)                                                             ",{}]],"38":[["     |  ",{}],["expand_default",{"bold":true}],["(self, option)                                             ",{}]],"39":[["     |                                                                           ",{}]],"40":[["     |  ",{}],["format_description",{"bold":true}],["(self, description)                                    ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[1.656213,{"lines":{"0":[["vvv@batmobile:~$ pydoc optparse                                                  ",{}]],"1":[["                                                                                 ",{}]],"2":[["                                                                                 ",{}]],"3":[["                                                                                 ",{}]],"4":[["                                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]],"8":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"10":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"18":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"24":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"27":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"30":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"33":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"36":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"38":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":0,"y":1}}],[0.00658,{"lines":{"2":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17,"y":2}}],[0.51425,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse                                                  ",{}]]},"cursor":{"x":31}}],[0.783545,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.                                                 ",{}]]},"cursor":{"x":32}}],[1.032758,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.H                                                ",{}]]},"cursor":{"x":33}}],[0.192088,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.He                                               ",{}]]},"cursor":{"x":34}}],[0.127389,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.Hel                                              ",{}]]},"cursor":{"x":35}}],[0.216225,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.Help                                             ",{}]]},"cursor":{"x":36}}],[0.464404,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.HelpF                                            ",{}]]},"cursor":{"x":37}}],[0.191783,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.HelpFo                                           ",{}]]},"cursor":{"x":38}}],[0.095874,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.HelpFor                                          ",{}]]},"cursor":{"x":39}}],[0.231989,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.HelpForm                                         ",{}]]},"cursor":{"x":40}}],[0.080279,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.HelpForma                                        ",{}]]},"cursor":{"x":41}}],[0.224211,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.HelpFormat                                       ",{}]]},"cursor":{"x":42}}],[0.143702,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.HelpFormatt                                      ",{}]]},"cursor":{"x":43}}],[0.103973,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.HelpFormatte                                     ",{}]]},"cursor":{"x":44}}],[0.112085,{"lines":{"2":[["vvv@batmobile:~$ pydoc optparse.HelpFormatter                                    ",{}]]},"cursor":{"x":45}}],[0.18409,{"cursor":{"x":0,"y":3}}],[0.09303,{"lines":{"0":[["                                                                                 ",{}]],"2":[["                                                                                 ",{}]]}}],[0.000342,{"lines":{"0":[["Help on class HelpFormatter in optparse:                                         ",{}]],"2":[["optparse.HelpFormatter",{"bold":true}],[" = class HelpFormatter                                     ",{}]],"3":[[" |  Abstract base class for formatting option help.  OptionParser                ",{}]],"4":[[" |  instances should use one of the HelpFormatter subclasses for                 ",{}]],"5":[[" |  formatting help; by default IndentedHelpFormatter is used.                   ",{}]],"6":[[" |                                                                               ",{}]],"7":[[" |  Instance attributes:                                                         ",{}]],"8":[[" |    parser : OptionParser                                                      ",{}]],"9":[[" |      the controlling OptionParser instance                                    ",{}]],"10":[[" |    indent_increment : int                                                     ",{}]],"11":[[" |      the number of columns to indent per nesting level                        ",{}]],"12":[[" |    max_help_position : int                                                    ",{}]],"13":[[" |      the maximum starting column for option help text                         ",{}]],"14":[[" |    help_position : int                                                        ",{}]],"15":[[" |      the calculated starting column for option help text;                     ",{}]],"16":[[" |      initially the same as the maximum                                        ",{}]],"17":[[" |    width : int                                                                ",{}]],"18":[[" |      total number of columns for output (pass None to constructor for         ",{}]],"19":[[" |      this value to be taken from the $COLUMNS environment variable)           ",{}]],"20":[[" |    level : int                                                                ",{}]],"21":[[" |      current indentation level                                                ",{}]],"22":[[" |    current_indent : int                                                       ",{}]],"23":[[" |      current indentation level (in columns)                                   ",{}]],"24":[[" |    help_width : int                                                           ",{}]],"25":[[" |      number of columns available for option help text (calculated)            ",{}]],"26":[[" |    default_tag : str                                                          ",{}]],"27":[[" |      text to replace with each option's default value, \"%default\"             ",{}]],"28":[[" |      by default.  Set to false value to disable default value expansion.      ",{}]],"29":[[" |    option_strings : { Option : str }                                          ",{}]],"30":[[" |      maps Option instances to the snippet of help text explaining             ",{}]],"31":[[" |      the syntax of that option, e.g. \"-h, --help\" or                          ",{}]],"32":[[" |      \"-fFILE, --file=FILE\"                                                    ",{}]],"33":[[" |    _short_opt_fmt : str                                                       ",{}]],"34":[[" |      format string controlling how short options with values are              ",{}]],"35":[[" |      printed in help text.  Must be either \"%s%s\" (\"-fFILE\") or               ",{}]],"36":[[" |      \"%s %s\" (\"-f FILE\"), because those are the two syntaxes that             ",{}]],"37":[[" |      Optik supports.                                                          ",{}]],"38":[[" |    _long_opt_fmt : str                                                        ",{}]],"39":[[" |      similar but for long options; must be either \"%s %s\" (\"--file FILE\")     ",{}]],"40":[[" |      or \"%s=%s\" (\"--file=FILE\").                                              ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1,"y":41}}],[3.235814,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000474,{"lines":{"0":[[" |      \"%s %s\" (\"-f FILE\"), because those are the two syntaxes that             ",{}]],"1":[[" |      Optik supports.                                                          ",{}]],"2":[[" |    _long_opt_fmt : str                                                        ",{}]],"3":[[" |      similar but for long options; must be either \"%s %s\" (\"--file FILE\")     ",{}]],"4":[[" |      or \"%s=%s\" (\"--file=FILE\").                                              ",{}]],"5":[[" |                                                                               ",{}]],"6":[[" |  Methods defined here:                                                        ",{}]],"7":[[" |                                                                               ",{}]],"8":[[" |  ",{}],["__init__",{"bold":true}],["(self, indent_increment, max_help_position, width, short_first)      ",{}]],"9":[[" |                                                                               ",{}]],"10":[[" |  ",{}],["dedent",{"bold":true}],["(self)                                                                 ",{}]],"11":[[" |                                                                               ",{}]],"12":[[" |  ",{}],["expand_default",{"bold":true}],["(self, option)                                                 ",{}]],"13":[[" |                                                                               ",{}]],"14":[[" |  ",{}],["format_description",{"bold":true}],["(self, description)                                        ",{}]],"15":[[" |                                                                               ",{}]],"16":[[" |  ",{}],["format_epilog",{"bold":true}],["(self, epilog)                                                  ",{}]],"17":[[" |                                                                               ",{}]],"18":[[" |  ",{}],["format_heading",{"bold":true}],["(self, heading)                                                ",{}]],"19":[[" |                                                                               ",{}]],"20":[[" |  ",{}],["format_option",{"bold":true}],["(self, option)                                                  ",{}]],"21":[[" |                                                                               ",{}]],"22":[[" |  ",{}],["format_option_strings",{"bold":true}],["(self, option)                                          ",{}]],"23":[[" |      Return a comma-separated list of option strings & metavariables.         ",{}]],"24":[[" |                                                                               ",{}]],"25":[[" |  ",{}],["format_usage",{"bold":true}],["(self, usage)                                                    ",{}]],"26":[[" |                                                                               ",{}]],"27":[[" |  ",{}],["indent",{"bold":true}],["(self)                                                                 ",{}]],"28":[[" |                                                                               ",{}]],"29":[[" |  ",{}],["set_long_opt_delimiter",{"bold":true}],["(self, delim)                                          ",{}]],"30":[[" |                                                                               ",{}]],"31":[[" |  ",{}],["set_parser",{"bold":true}],["(self, parser)                                                     ",{}]],"32":[[" |                                                                               ",{}]],"33":[[" |  ",{}],["set_short_opt_delimiter",{"bold":true}],["(self, delim)                                         ",{}]],"34":[[" |                                                                               ",{}]],"35":[[" |  ",{}],["store_option_strings",{"bold":true}],["(self, parser)                                           ",{}]],"36":[[" |                                                                               ",{}]],"37":[[" |  ----------------------------------------------------------------------       ",{}]],"38":[[" |  Data and other attributes defined here:                                      ",{}]],"39":[[" |                                                                               ",{}]],"40":[[" |  ",{}],["NO_DEFAULT_VALUE",{"bold":true}],[" = 'none'                                                    ",{}]],"41":[["(END) ",{"inverse":true}],["                                                                           ",{}]]},"cursor":{"x":6}}],[0.207514,{}],[2.168516,{"lines":{"0":[["vvv@batmobile:~$ pydoc optparse                                                  ",{}]],"1":[["                                                                                 ",{}]],"2":[["vvv@batmobile:~$ pydoc optparse.HelpFormatter                                    ",{}]],"3":[["                                                                                 ",{}]],"4":[["                                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]],"8":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"10":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"18":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"24":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"27":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"30":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"33":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"36":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"38":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":0,"y":3}}],[0.008728,{"lines":{"4":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17,"y":4}}],[1.159048,{"lines":{"4":[["vvv@batmobile:~$ p                                                               ",{}]]},"cursor":{"x":18}}],[0.184128,{"lines":{"4":[["vvv@batmobile:~$ py                                                              ",{}]]},"cursor":{"x":19}}],[0.5836750000000001,{"lines":{"4":[["vvv@batmobile:~$ pyd                                                             ",{}]]},"cursor":{"x":20}}],[0.064816,{"lines":{"4":[["vvv@batmobile:~$ pydo                                                            ",{}]]},"cursor":{"x":21}}],[0.127184,{"lines":{"4":[["vvv@batmobile:~$ pydoc                                                           ",{}]]},"cursor":{"x":22}}],[1.552912,{"cursor":{"x":23}}],[0.071382,{"lines":{"4":[["vvv@batmobile:~$ pydoc d                                                         ",{}]]},"cursor":{"x":24}}],[0.112598,{"lines":{"4":[["vvv@batmobile:~$ pydoc di                                                        ",{}]]},"cursor":{"x":25}}],[0.088322,{"lines":{"4":[["vvv@batmobile:~$ pydoc dic                                                       ",{}]]},"cursor":{"x":26}}],[0.167856,{"lines":{"4":[["vvv@batmobile:~$ pydoc dict                                                      ",{}]]},"cursor":{"x":27}}],[0.231264,{"cursor":{"x":0,"y":5}}],[0.06513099999999999,{"lines":{"0":[["                                                                                 ",{}]],"2":[["                                                                                 ",{}]],"4":[["                                                                                 ",{}]]}}],[0.0003100000000000001,{"lines":{"0":[["Help on class dict in module __builtin__:                                        ",{}]],"2":[["class ",{}],["dict",{"bold":true}],["(object)                                                               ",{}]],"3":[[" |  dict() -> new empty dictionary                                               ",{}]],"4":[[" |  dict(mapping) -> new dictionary initialized from a mapping object's          ",{}]],"5":[[" |      (key, value) pairs                                                       ",{}]],"6":[[" |  dict(iterable) -> new dictionary initialized as if via:                      ",{}]],"7":[[" |      d = {}                                                                   ",{}]],"8":[[" |      for k, v in iterable:                                                    ",{}]],"9":[[" |          d[k] = v                                                             ",{}]],"10":[[" |  dict(**kwargs) -> new dictionary initialized with the name=value pairs       ",{}]],"11":[[" |      in the keyword argument list.  For example:  dict(one=1, two=2)          ",{}]],"12":[[" |                                                                               ",{}]],"13":[[" |  Methods defined here:                                                        ",{}]],"14":[[" |                                                                               ",{}]],"15":[[" |  ",{}],["__cmp__",{"bold":true}],["(...)                                                                 ",{}]],"16":[[" |      x.__cmp__(y) <==> cmp(x,y)                                               ",{}]],"17":[[" |                                                                               ",{}]],"18":[[" |  ",{}],["__contains__",{"bold":true}],["(...)                                                            ",{}]],"19":[[" |      D.__contains__(k) -> True if D has a key k, else False                   ",{}]],"20":[[" |                                                                               ",{}]],"21":[[" |  ",{}],["__delitem__",{"bold":true}],["(...)                                                             ",{}]],"22":[[" |      x.__delitem__(y) <==> del x[y]                                           ",{}]],"23":[[" |                                                                               ",{}]],"24":[[" |  ",{}],["__eq__",{"bold":true}],["(...)                                                                  ",{}]],"25":[[" |      x.__eq__(y) <==> x==y                                                    ",{}]],"26":[[" |                                                                               ",{}]],"27":[[" |  ",{}],["__ge__",{"bold":true}],["(...)                                                                  ",{}]],"28":[[" |      x.__ge__(y) <==> x>=y                                                    ",{}]],"29":[[" |                                                                               ",{}]],"30":[[" |  ",{}],["__getattribute__",{"bold":true}],["(...)                                                        ",{}]],"31":[[" |      x.__getattribute__('name') <==> x.name                                   ",{}]],"32":[[" |                                                                               ",{}]],"33":[[" |  ",{}],["__getitem__",{"bold":true}],["(...)                                                             ",{}]],"34":[[" |      x.__getitem__(y) <==> x[y]                                               ",{}]],"35":[[" |                                                                               ",{}]],"36":[[" |  ",{}],["__gt__",{"bold":true}],["(...)                                                                  ",{}]],"37":[[" |      x.__gt__(y) <==> x>y                                                     ",{}]],"38":[[" |                                                                               ",{}]],"39":[[" |  ",{}],["__init__",{"bold":true}],["(...)                                                                ",{}]],"40":[[" |      x.__init__(...) initializes x; see help(type(x)) for signature           ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1,"y":41}}],[1.071521,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000577,{"lines":{"0":[[" |                                                                               ",{}]],"1":[[" |  ",{}],["__iter__",{"bold":true}],["(...)                                                                ",{}]],"2":[[" |      x.__iter__() <==> iter(x)                                                ",{}]],"3":[[" |                                                                               ",{}]],"4":[[" |  ",{}],["__le__",{"bold":true}],["(...)                                                                  ",{}]],"5":[[" |      x.__le__(y) <==> x<=y                                                    ",{}]],"6":[[" |                                                                               ",{}]],"7":[[" |  ",{}],["__len__",{"bold":true}],["(...)                                                                 ",{}]],"8":[[" |      x.__len__() <==> len(x)                                                  ",{}]],"9":[[" |                                                                               ",{}]],"10":[[" |  ",{}],["__lt__",{"bold":true}],["(...)                                                                  ",{}]],"11":[[" |      x.__lt__(y) <==> x<y                                                     ",{}]],"13":[[" |  ",{}],["__ne__",{"bold":true}],["(...)                                                                  ",{}]],"14":[[" |      x.__ne__(y) <==> x!=y                                                    ",{}]],"15":[[" |                                                                               ",{}]],"16":[[" |  ",{}],["__repr__",{"bold":true}],["(...)                                                                ",{}]],"17":[[" |      x.__repr__() <==> repr(x)                                                ",{}]],"18":[[" |                                                                               ",{}]],"19":[[" |  ",{}],["__setitem__",{"bold":true}],["(...)                                                             ",{}]],"20":[[" |      x.__setitem__(i, y) <==> x[i]=y                                          ",{}]],"21":[[" |                                                                               ",{}]],"22":[[" |  ",{}],["__sizeof__",{"bold":true}],["(...)                                                              ",{}]],"23":[[" |      D.__sizeof__() -> size of D in memory, in bytes                          ",{}]],"24":[[" |                                                                               ",{}]],"25":[[" |  ",{}],["clear",{"bold":true}],["(...)                                                                   ",{}]],"26":[[" |      D.clear() -> None.  Remove all items from D.                             ",{}]],"27":[[" |                                                                               ",{}]],"28":[[" |  ",{}],["copy",{"bold":true}],["(...)                                                                    ",{}]],"29":[[" |      D.copy() -> a shallow copy of D                                          ",{}]],"30":[[" |                                                                               ",{}]],"31":[[" |  ",{}],["fromkeys",{"bold":true}],["(...)                                                                ",{}]],"32":[[" |      dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v. ",{}]],"33":[[" |      v defaults to None.                                                      ",{}]],"34":[[" |                                                                               ",{}]],"35":[[" |  ",{}],["get",{"bold":true}],["(...)                                                                     ",{}]],"36":[[" |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.             ",{}]],"37":[[" |                                                                               ",{}]],"38":[[" |  ",{}],["has_key",{"bold":true}],["(...)                                                                 ",{}]],"39":[[" |      D.has_key(k) -> True if D has a key k, else False                        ",{}]],"40":[[" |                                                                               ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.151389,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.0007719999999999999,{"lines":{"0":[[" |  ",{}],["items",{"bold":true}],["(...)                                                                   ",{}]],"1":[[" |      D.items() -> list of D's (key, value) pairs, as 2-tuples                 ",{}]],"2":[[" |                                                                               ",{}]],"3":[[" |  ",{}],["iteritems",{"bold":true}],["(...)                                                               ",{}]],"4":[[" |      D.iteritems() -> an iterator over the (key, value) items of D            ",{}]],"5":[[" |                                                                               ",{}]],"6":[[" |  ",{}],["iterkeys",{"bold":true}],["(...)                                                                ",{}]],"7":[[" |      D.iterkeys() -> an iterator over the keys of D                           ",{}]],"8":[[" |                                                                               ",{}]],"9":[[" |  ",{}],["itervalues",{"bold":true}],["(...)                                                              ",{}]],"10":[[" |      D.itervalues() -> an iterator over the values of D                       ",{}]],"11":[[" |                                                                               ",{}]],"12":[[" |  ",{}],["keys",{"bold":true}],["(...)                                                                    ",{}]],"13":[[" |      D.keys() -> list of D's keys                                             ",{}]],"14":[[" |                                                                               ",{}]],"15":[[" |  ",{}],["pop",{"bold":true}],["(...)                                                                     ",{}]],"16":[[" |      D.pop(k[,d]) -> v, remove specified key and return the corresponding valu",{}]],"17":[["e.                                                                               ",{}]],"18":[[" |      If key is not found, d is returned if given, otherwise KeyError is raised",{}]],"19":[[" |                                                                               ",{}]],"20":[[" |  ",{}],["popitem",{"bold":true}],["(...)                                                                 ",{}]],"21":[[" |      D.popitem() -> (k, v), remove and return some (key, value) pair as a     ",{}]],"22":[[" |      2-tuple; but raise KeyError if D is empty.                               ",{}]],"23":[[" |                                                                               ",{}]],"24":[[" |  ",{}],["setdefault",{"bold":true}],["(...)                                                              ",{}]],"25":[[" |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D         ",{}]],"26":[[" |                                                                               ",{}]],"27":[[" |  ",{}],["update",{"bold":true}],["(...)                                                                  ",{}]],"28":[[" |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.        ",{}]],"29":[[" |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k] ",{}]],"30":[[" |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = ",{}]],"31":[["v                                                                                ",{}]],"32":[[" |      In either case, this is followed by: for k in F: D[k] = F[k]             ",{}]],"33":[[" |                                                                               ",{}]],"34":[[" |  ",{}],["values",{"bold":true}],["(...)                                                                  ",{}]],"35":[[" |      D.values() -> list of D's values                                         ",{}]],"36":[[" |                                                                               ",{}]],"37":[[" |  ",{}],["viewitems",{"bold":true}],["(...)                                                               ",{}]],"38":[[" |      D.viewitems() -> a set-like object providing a view on D's items         ",{}]],"39":[[" |                                                                               ",{}]],"40":[[" |  ",{}],["viewkeys",{"bold":true}],["(...)                                                                ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.143202,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000258,{"lines":{"0":[[" |  ",{}],["keys",{"bold":true}],["(...)                                                                    ",{}]],"1":[[" |      D.keys() -> list of D's keys                                             ",{}]],"3":[[" |  ",{}],["pop",{"bold":true}],["(...)                                                                     ",{}]],"4":[[" |      D.pop(k[,d]) -> v, remove specified key and return the corresponding valu",{}]],"5":[["e.                                                                               ",{}]],"6":[[" |      If key is not found, d is returned if given, otherwise KeyError is raised",{}]],"7":[[" |                                                                               ",{}]],"8":[[" |  ",{}],["popitem",{"bold":true}],["(...)                                                                 ",{}]],"9":[[" |      D.popitem() -> (k, v), remove and return some (key, value) pair as a     ",{}]],"10":[[" |      2-tuple; but raise KeyError if D is empty.                               ",{}]],"12":[[" |  ",{}],["setdefault",{"bold":true}],["(...)                                                              ",{}]],"13":[[" |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D         ",{}]],"15":[[" |  ",{}],["update",{"bold":true}],["(...)                                                                  ",{}]],"16":[[" |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.        ",{}]],"17":[[" |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k] ",{}]],"18":[[" |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = ",{}]],"19":[["v                                                                                ",{}]],"20":[[" |      In either case, this is followed by: for k in F: D[k] = F[k]             ",{}]],"21":[[" |                                                                               ",{}]],"22":[[" |  ",{}],["values",{"bold":true}],["(...)                                                                  ",{}]],"23":[[" |      D.values() -> list of D's values                                         ",{}]],"24":[[" |                                                                               ",{}]],"25":[[" |  ",{}],["viewitems",{"bold":true}],["(...)                                                               ",{}]],"26":[[" |      D.viewitems() -> a set-like object providing a view on D's items         ",{}]],"27":[[" |                                                                               ",{}]],"28":[[" |  ",{}],["viewkeys",{"bold":true}],["(...)                                                                ",{}]],"29":[[" |      D.viewkeys() -> a set-like object providing a view on D's keys           ",{}]],"30":[[" |                                                                               ",{}]],"31":[[" |  ",{}],["viewvalues",{"bold":true}],["(...)                                                              ",{}]],"32":[[" |      D.viewvalues() -> an object providing a view on D's values               ",{}]],"34":[[" |  ----------------------------------------------------------------------       ",{}]],"35":[[" |  Data and other attributes defined here:                                      ",{}]],"37":[[" |  ",{}],["__hash__",{"bold":true}],[" = None                                                              ",{}]],"38":[[" |                                                                               ",{}]],"39":[[" |  ",{}],["__new__",{"bold":true}],[" = <built-in method __new__ of type object>                           ",{}]],"40":[[" |      T.__new__(S, ...) -> a new object with type S, a subtype of T            ",{}]],"41":[["(END) ",{"inverse":true}],["                                                                           ",{}]]},"cursor":{"x":6}}],[0.1921,{}],[0.150863,{}],[2.697224,{"lines":{"0":[["vvv@batmobile:~$ pydoc optparse                                                  ",{}]],"1":[["                                                                                 ",{}]],"2":[["vvv@batmobile:~$ pydoc optparse.HelpFormatter                                    ",{}]],"3":[["                                                                                 ",{}]],"4":[["vvv@batmobile:~$ pydoc dict                                                      ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]],"8":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"10":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"18":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"24":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"27":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"30":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"33":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"36":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"38":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":0,"y":5}}],[0.006508,{"lines":{"6":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17,"y":6}}],[8.815384,{"lines":{"6":[["vvv@batmobile:~$ #                                                               ",{}]]},"cursor":{"x":18}}],[0.816677,{"cursor":{"x":19}}],[0.175878,{"lines":{"6":[["vvv@batmobile:~$ # p                                                             ",{}]]},"cursor":{"x":20}}],[0.184284,{"lines":{"6":[["vvv@batmobile:~$ # py                                                            ",{}]]},"cursor":{"x":21}}],[0.375518,{"lines":{"6":[["vvv@batmobile:~$ # pyd                                                           ",{}]]},"cursor":{"x":22}}],[0.06365899999999999,{"lines":{"6":[["vvv@batmobile:~$ # pydo                                                          ",{}]]},"cursor":{"x":23}}],[0.112685,{"lines":{"6":[["vvv@batmobile:~$ # pydoc                                                         ",{}]]},"cursor":{"x":24}}],[1.320376,{"cursor":{"x":25}}],[0.296126,{"lines":{"6":[["vvv@batmobile:~$ # pydoc =                                                       ",{}]]},"cursor":{"x":26}}],[0.143166,{"cursor":{"x":27}}],[0.880717,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = m                                                     ",{}]]},"cursor":{"x":28}}],[0.06433700000000001,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = ma                                                    ",{}]]},"cursor":{"x":29}}],[0.127525,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man                                                   ",{}]]},"cursor":{"x":30}}],[0.08044,{"cursor":{"x":31}}],[0.495541,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man f                                                 ",{}]]},"cursor":{"x":32}}],[0.048127,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man fo                                                ",{}]]},"cursor":{"x":33}}],[0.128469,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for                                               ",{}]]},"cursor":{"x":34}}],[0.080155,{"cursor":{"x":35}}],[0.847453,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for P                                             ",{}]]},"cursor":{"x":36}}],[0.168181,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Py                                            ",{}]]},"cursor":{"x":37}}],[0.143977,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Pyt                                           ",{}]]},"cursor":{"x":38}}],[0.080469,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Pyth                                          ",{}]]},"cursor":{"x":39}}],[0.088212,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Pytho                                         ",{}]]},"cursor":{"x":40}}],[0.175556,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Python                                        ",{}]]},"cursor":{"x":41}}],[1.303667,{"cursor":{"x":42}}],[0.128357,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Python m                                      ",{}]]},"cursor":{"x":43}}],[0.055591,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Python mo                                     ",{}]]},"cursor":{"x":44}}],[0.152869,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Python mod                                    ",{}]]},"cursor":{"x":45}}],[0.095304,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Python modu                                   ",{}]]},"cursor":{"x":46}}],[0.06438000000000001,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Python modul                                  ",{}]]},"cursor":{"x":47}}],[0.080037,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Python module                                 ",{}]]},"cursor":{"x":48}}],[0.08078200000000001,{"lines":{"6":[["vvv@batmobile:~$ # pydoc = man for Python modules                                ",{}]]},"cursor":{"x":49}}],[2.095473,{"cursor":{"x":0,"y":7}}],[0.000193,{"lines":{"7":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17}}],[2.489281,{"lines":{"0":[["vvv@batmobile:~$                                                                 ",{}]],"2":[["                                                                                 ",{}]],"4":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]]},"cursor":{"y":0}}],[0.847016,{"lines":{"0":[["vvv@batmobile:~$ #                                                               ",{}]]},"cursor":{"x":18}}],[0.224335,{"cursor":{"x":19}}],[0.176016,{"lines":{"0":[["vvv@batmobile:~$ # N                                                             ",{}]]},"cursor":{"x":20}}],[0.167727,{"lines":{"0":[["vvv@batmobile:~$ # No                                                            ",{}]]},"cursor":{"x":21}}],[0.08104600000000001,{"lines":{"0":[["vvv@batmobile:~$ # Now                                                           ",{}]]},"cursor":{"x":22}}],[0.215093,{"cursor":{"x":23}}],[0.120346,{"lines":{"0":[["vvv@batmobile:~$ # Now l                                                         ",{}]]},"cursor":{"x":24}}],[0.104096,{"lines":{"0":[["vvv@batmobile:~$ # Now le                                                        ",{}]]},"cursor":{"x":25}}],[0.127783,{"lines":{"0":[["vvv@batmobile:~$ # Now let                                                       ",{}]]},"cursor":{"x":26}}],[0.152243,{"lines":{"0":[["vvv@batmobile:~$ # Now let'                                                      ",{}]]},"cursor":{"x":27}}],[0.112403,{"lines":{"0":[["vvv@batmobile:~$ # Now let's                                                     ",{}]]},"cursor":{"x":28}}],[0.472115,{"cursor":{"x":29}}],[2.904287,{"lines":{"0":[["vvv@batmobile:~$ # Now let's t                                                   ",{}]]},"cursor":{"x":30}}],[0.20801,{"lines":{"0":[["vvv@batmobile:~$ # Now let's tr                                                  ",{}]]},"cursor":{"x":31}}],[0.07994999999999999,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try                                                 ",{}]]},"cursor":{"x":32}}],[0.616433,{"cursor":{"x":33}}],[0.447613,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try r                                               ",{}]]},"cursor":{"x":34}}],[0.072949,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try re                                              ",{}]]},"cursor":{"x":35}}],[0.119506,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try rea                                             ",{}]]},"cursor":{"x":36}}],[0.168256,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try read                                            ",{}]]},"cursor":{"x":37}}],[0.09590899999999999,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try readi                                           ",{}]]},"cursor":{"x":38}}],[0.07906100000000001,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try readin                                          ",{}]]},"cursor":{"x":39}}],[0.097093,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading                                         ",{}]]},"cursor":{"x":40}}],[1.055638,{"cursor":{"x":41}}],[0.088044,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading d                                       ",{}]]},"cursor":{"x":42}}],[0.063996,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading do                                      ",{}]]},"cursor":{"x":43}}],[0.15239,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading doc                                     ",{}]]},"cursor":{"x":44}}],[0.415651,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading docu                                    ",{}]]},"cursor":{"x":45}}],[0.239993,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading docum                                   ",{}]]},"cursor":{"x":46}}],[0.208811,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading docume                                  ",{}]]},"cursor":{"x":47}}],[0.15192,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documen                                 ",{}]]},"cursor":{"x":48}}],[0.143416,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading document                                ",{}]]},"cursor":{"x":49}}],[0.128506,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documenta                               ",{}]]},"cursor":{"x":50}}],[0.08771,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentat                              ",{}]]},"cursor":{"x":51}}],[0.08812399999999999,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentati                             ",{}]]},"cursor":{"x":52}}],[0.07137,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentatio                            ",{}]]},"cursor":{"x":53}}],[0.039934,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation                           ",{}]]},"cursor":{"x":54}}],[0.272509,{"cursor":{"x":55}}],[0.440218,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation f                         ",{}]]},"cursor":{"x":56}}],[0.175851,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation fr                        ",{}]]},"cursor":{"x":57}}],[0.04812,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation fro                       ",{}]]},"cursor":{"x":58}}],[0.103942,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from                      ",{}]]},"cursor":{"x":59}}],[0.08050400000000001,{"cursor":{"x":60}}],[0.303699,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from w                    ",{}]]},"cursor":{"x":61}}],[0.055475,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from wi                   ",{}]]},"cursor":{"x":62}}],[0.168461,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from wit                  ",{}]]},"cursor":{"x":63}}],[0.07159699999999999,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from with                 ",{}]]},"cursor":{"x":64}}],[0.104553,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from witho                ",{}]]},"cursor":{"x":65}}],[0.432381,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from with                 ",{}]]},"cursor":{"x":64}}],[0.184081,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from withi                ",{}]]},"cursor":{"x":65}}],[0.056252,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within               ",{}]]},"cursor":{"x":66}}],[0.239146,{"cursor":{"x":67}}],[0.144365,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within t             ",{}]]},"cursor":{"x":68}}],[0.040281,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within th            ",{}]]},"cursor":{"x":69}}],[0.135825,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the           ",{}]]},"cursor":{"x":70}}],[0.031923,{"cursor":{"x":71}}],[0.288085,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the i         ",{}]]},"cursor":{"x":72}}],[0.047452,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the in        ",{}]]},"cursor":{"x":73}}],[0.136305,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the int       ",{}]]},"cursor":{"x":74}}],[0.120638,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the inte      ",{}]]},"cursor":{"x":75}}],[0.119455,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the inter     ",{}]]},"cursor":{"x":76}}],[0.296653,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the interp    ",{}]]},"cursor":{"x":77}}],[0.271964,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the interpr   ",{}]]},"cursor":{"x":78}}],[0.031519,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the interpre  ",{}]]},"cursor":{"x":79}}],[0.648168,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the interpret ",{}]]},"cursor":{"x":80}}],[0.07953499999999999,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the interprete",{}]]},"cursor":{"x":0,"y":1}}],[0.128986,{"lines":{"1":[["r                                                                                ",{}]]},"cursor":{"x":1}}],[0.423545,{"lines":{"1":[["r.                                                                               ",{}]]},"cursor":{"x":2}}],[0.344383,{"cursor":{"x":0,"y":2}}],[0.000311,{"lines":{"2":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17}}],[1.312169,{"lines":{"2":[["vvv@batmobile:~$ p                                                               ",{}]]},"cursor":{"x":18}}],[0.151173,{"lines":{"2":[["vvv@batmobile:~$ py                                                              ",{}]]},"cursor":{"x":19}}],[0.08824,{"lines":{"2":[["vvv@batmobile:~$ pyt                                                             ",{}]]},"cursor":{"x":20}}],[0.112787,{"lines":{"2":[["vvv@batmobile:~$ pyth                                                            ",{}]]},"cursor":{"x":21}}],[0.023721,{"lines":{"2":[["vvv@batmobile:~$ pytho                                                           ",{}]]},"cursor":{"x":22}}],[0.510876,{"lines":{"2":[["vvv@batmobile:~$ python                                                          ",{}]]},"cursor":{"x":23}}],[0.489132,{"cursor":{"x":0,"y":3}}],[0.024833,{"lines":{"3":[["Python 2.7.5 (default, Mar  9 2014, 22:15:05)                                    ",{}]],"4":[["[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin                 ",{}]],"5":[["Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.           ",{}]]},"cursor":{"y":6}}],[0.001192,{"lines":{"6":[[">>>                                                                              ",{}]]},"cursor":{"x":4}}],[0.742703,{"lines":{"6":[[">>> i                                                                            ",{}]]},"cursor":{"x":5}}],[0.039111,{"lines":{"6":[[">>> im                                                                           ",{}]]},"cursor":{"x":6}}],[0.120243,{"lines":{"6":[[">>> imp                                                                          ",{}]]},"cursor":{"x":7}}],[0.144403,{"lines":{"6":[[">>> impo                                                                         ",{}]]},"cursor":{"x":8}}],[0.111331,{"lines":{"6":[[">>> impor                                                                        ",{}]]},"cursor":{"x":9}}],[0.192781,{"lines":{"6":[[">>> import                                                                       ",{}]]},"cursor":{"x":10}}],[0.039407,{"cursor":{"x":11}}],[0.696676,{"lines":{"6":[[">>> import d                                                                     ",{}]]},"cursor":{"x":12}}],[0.047318,{"lines":{"6":[[">>> import di                                                                    ",{}]]},"cursor":{"x":13}}],[0.111725,{"lines":{"6":[[">>> import dif                                                                   ",{}]]},"cursor":{"x":14}}],[0.120898,{"lines":{"6":[[">>> import diff                                                                  ",{}]]},"cursor":{"x":15}}],[0.144175,{"lines":{"6":[[">>> import diffl                                                                 ",{}]]},"cursor":{"x":16}}],[0.055918,{"lines":{"6":[[">>> import diffli                                                                ",{}]]},"cursor":{"x":17}}],[0.135712,{"lines":{"6":[[">>> import difflib                                                               ",{}]]},"cursor":{"x":18}}],[0.704515,{"cursor":{"x":0,"y":7}}],[0.008972000000000001,{"lines":{"7":[[">>>                                                                              ",{}]]},"cursor":{"x":4}}],[0.599158,{"lines":{"7":[[">>> h                                                                            ",{}]]},"cursor":{"x":5}}],[0.063569,{"lines":{"7":[[">>> he                                                                           ",{}]]},"cursor":{"x":6}}],[0.079861,{"lines":{"7":[[">>> hel                                                                          ",{}]]},"cursor":{"x":7}}],[0.111792,{"lines":{"7":[[">>> help                                                                         ",{}]]},"cursor":{"x":8}}],[0.552578,{"lines":{"7":[[">>> help(                                                                        ",{}]]},"cursor":{"x":9}}],[0.223805,{"lines":{"7":[[">>> help(d                                                                       ",{}]]},"cursor":{"x":10}}],[0.063836,{"lines":{"7":[[">>> help(di                                                                      ",{}]]},"cursor":{"x":11}}],[0.112313,{"lines":{"7":[[">>> help(dif                                                                     ",{}]]},"cursor":{"x":12}}],[0.136573,{"lines":{"7":[[">>> help(diff                                                                    ",{}]]},"cursor":{"x":13}}],[0.095384,{"lines":{"7":[[">>> help(diffl                                                                   ",{}]]},"cursor":{"x":14}}],[0.096084,{"lines":{"7":[[">>> help(diffli                                                                  ",{}]]},"cursor":{"x":15}}],[0.128283,{"lines":{"7":[[">>> help(difflib                                                                 ",{}]]},"cursor":{"x":16}}],[0.367569,{"lines":{"7":[[">>> help(difflib)                                                                ",{}]]},"cursor":{"x":17}}],[0.272288,{"cursor":{"x":0,"y":8}}],[0.042508,{"lines":{"0":[["                                                                                 ",{}]],"1":[["                                                                                 ",{}]],"2":[["                                                                                 ",{}]],"3":[["                                                                                 ",{}]],"4":[["                                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]]}}],[0.000201,{"lines":{"0":[["Help on module difflib:                                                          ",{}]],"2":[["NAME",{"bold":true}],["                                                                             ",{}]],"3":[["    difflib - Module difflib -- helpers for computing deltas between objects.    ",{}]],"5":[["FILE",{"bold":true}],["                                                                             ",{}]],"6":[["    /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/diffli",{}]],"7":[["b.py                                                                             ",{}]],"9":[["MODULE DOCS",{"bold":true}],["                                                                      ",{}]],"10":[["    http://docs.python.org/library/difflib                                       ",{}]],"12":[["DESCRIPTION",{"bold":true}],["                                                                      ",{}]],"13":[["    Function get_close_matches(word, possibilities, n=3, cutoff=0.6):            ",{}]],"14":[["        Use SequenceMatcher to return list of the best \"good enough\" matches.    ",{}]],"16":[["    Function context_diff(a, b):                                                 ",{}]],"17":[["        For two lists of strings, return a delta in context diff format.         ",{}]],"19":[["    Function ndiff(a, b):                                                        ",{}]],"20":[["        Return a delta: the difference between `a` and `b` (lists of strings).   ",{}]],"22":[["    Function restore(delta, which):                                              ",{}]],"23":[["        Return one of the two sequences that generated an ndiff delta.           ",{}]],"25":[["    Function unified_diff(a, b):                                                 ",{}]],"26":[["        For two lists of strings, return a delta in unified diff format.         ",{}]],"28":[["    Class SequenceMatcher:                                                       ",{}]],"29":[["        A flexible class for comparing pairs of sequences of any type.           ",{}]],"31":[["    Class Differ:                                                                ",{}]],"32":[["        For producing human-readable deltas from sequences of lines of text.     ",{}]],"34":[["    Class HtmlDiff:                                                              ",{}]],"35":[["        For producing HTML side by side comparison with change highlights.       ",{}]],"37":[["CLASSES",{"bold":true}],["                                                                          ",{}]],"38":[["    __builtin__.object                                                           ",{}]],"39":[["        HtmlDiff                                                                 ",{}]],"40":[["    __builtin__.tuple(__builtin__.object)                                        ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1,"y":41}}],[0.76546,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.0005330000000000001,{"lines":{"0":[["        Match                                                                    ",{}]],"1":[["    Differ                                                                       ",{}]],"2":[["    SequenceMatcher                                                              ",{}]],"3":[["                                                                                 ",{}]],"4":[["    class ",{}],["Differ",{"bold":true}],["                                                                 ",{}]],"5":[["     |  Differ is a class for comparing sequences of lines of text, and          ",{}]],"6":[["     |  producing human-readable differences or deltas.  Differ uses             ",{}]],"7":[["     |  SequenceMatcher both to compare sequences of lines, and to compare       ",{}]],"8":[["     |  sequences of characters within similar (near-matching) lines.            ",{}]],"9":[["     |                                                                           ",{}]],"10":[["     |  Each line of a Differ delta begins with a two-letter code:               ",{}]],"11":[["     |                                                                           ",{}]],"12":[["     |      '- '    line unique to sequence 1                                    ",{}]],"13":[["     |      '+ '    line unique to sequence 2                                    ",{}]],"14":[["     |      '  '    line common to both sequences                                ",{}]],"15":[["     |      '? '    line not present in either input sequence                    ",{}]],"16":[["     |                                                                           ",{}]],"17":[["     |  Lines beginning with '? ' attempt to guide the eye to intraline          ",{}]],"18":[["     |  differences, and were not present in either input sequence.  These lines ",{}]],"19":[["     |  can be confusing if the sequences contain tab characters.                ",{}]],"20":[["     |                                                                           ",{}]],"21":[["     |  Note that Differ makes no claim to produce a *minimal* diff.  To the     ",{}]],"22":[["     |  contrary, minimal diffs are often counter-intuitive, because they synch  ",{}]],"23":[["     |  up anywhere possible, sometimes accidental matches 100 pages apart.      ",{}]],"24":[["     |  Restricting synch points to contiguous matches preserves some notion of  ",{}]],"25":[["     |  locality, at the occasional cost of producing a longer diff.             ",{}]],"26":[["     |                                                                           ",{}]],"27":[["     |  Example: Comparing two texts.                                            ",{}]],"28":[["     |                                                                           ",{}]],"29":[["     |  First we set up the texts, sequences of individual single-line strings   ",{}]],"30":[["     |  ending with newlines (such sequences can also be obtained from the       ",{}]],"31":[["     |  `readlines()` method of file-like objects):                              ",{}]],"32":[["     |                                                                           ",{}]],"33":[["     |  >>> text1 = '''  1. Beautiful is better than ugly.                       ",{}]],"34":[["     |  ...   2. Explicit is better than implicit.                               ",{}]],"35":[["     |  ...   3. Simple is better than complex.                                  ",{}]],"36":[["     |  ...   4. Complex is better than complicated.                             ",{}]],"37":[["     |  ... '''.splitlines(1)                                                    ",{}]],"38":[["     |  >>> len(text1)                                                           ",{}]],"39":[["     |  4                                                                        ",{}]],"40":[["     |  >>> text1[0][-1]                                                         ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.143588,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.0005729999999999999,{"lines":{"0":[["     |  '\\n'                                                                     ",{}]],"1":[["     |  >>> text2 = '''  1. Beautiful is better than ugly.                       ",{}]],"2":[["     |  ...   3.   Simple is better than complex.                                ",{}]],"3":[["     |  ...   4. Complicated is better than complex.                             ",{}]],"4":[["     |  ...   5. Flat is better than nested.                                     ",{}]],"5":[["     |  ... '''.splitlines(1)                                                    ",{}]],"6":[["     |                                                                           ",{}]],"7":[["     |  Next we instantiate a Differ object:                                     ",{}]],"8":[["     |                                                                           ",{}]],"9":[["     |  >>> d = Differ()                                                         ",{}]],"10":[["     |                                                                           ",{}]],"11":[["     |  Note that when instantiating a Differ object we may pass functions to    ",{}]],"12":[["     |  filter out line and character 'junk'.  See Differ.__init__ for details.  ",{}]],"13":[["     |                                                                           ",{}]],"14":[["     |  Finally, we compare the two:                                             ",{}]],"15":[["     |                                                                           ",{}]],"16":[["     |  >>> result = list(d.compare(text1, text2))                               ",{}]],"17":[["     |                                                                           ",{}]],"18":[["     |  'result' is a list of strings, so let's pretty-print it:                 ",{}]],"19":[["     |                                                                           ",{}]],"20":[["     |  >>> from pprint import pprint as _pprint                                 ",{}]],"21":[["     |  >>> _pprint(result)                                                      ",{}]],"22":[["     |  ['    1. Beautiful is better than ugly.\\n',                              ",{}]],"23":[["     |   '-   2. Explicit is better than implicit.\\n',                           ",{}]],"24":[["     |   '-   3. Simple is better than complex.\\n',                              ",{}]],"25":[["     |   '+   3.   Simple is better than complex.\\n',                            ",{}]],"26":[["     |   '?     ++\\n',                                                           ",{}]],"27":[["     |   '-   4. Complex is better than complicated.\\n',                         ",{}]],"28":[["     |   '?            ^                     ---- ^\\n',                          ",{}]],"29":[["     |   '+   4. Complicated is better than complex.\\n',                         ",{}]],"30":[["     |   '?           ++++ ^                      ^\\n',                          ",{}]],"31":[["     |   '+   5. Flat is better than nested.\\n']                                 ",{}]],"33":[["     |  As a single multi-line string it looks like this:                        ",{}]],"34":[["     |                                                                           ",{}]],"35":[["     |  >>> print ''.join(result),                                               ",{}]],"36":[["     |      1. Beautiful is better than ugly.                                    ",{}]],"37":[["     |  -   2. Explicit is better than implicit.                                 ",{}]],"38":[["     |  -   3. Simple is better than complex.                                    ",{}]],"39":[["     |  +   3.   Simple is better than complex.                                  ",{}]],"40":[["     |  ?     ++                                                                 ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.135126,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000531,{"lines":{"0":[["     |  -   4. Complex is better than complicated.                               ",{}]],"1":[["     |  ?            ^                     ---- ^                                ",{}]],"2":[["     |  +   4. Complicated is better than complex.                               ",{}]],"3":[["     |  ?           ++++ ^                      ^                                ",{}]],"4":[["     |  +   5. Flat is better than nested.                                       ",{}]],"5":[["     |                                                                           ",{}]],"6":[["     |  Methods:                                                                 ",{}]],"7":[["     |                                                                           ",{}]],"8":[["     |  __init__(linejunk=None, charjunk=None)                                   ",{}]],"9":[["     |      Construct a text differencer, with optional filters.                 ",{}]],"11":[["     |  compare(a, b)                                                            ",{}]],"12":[["     |      Compare two sequences of lines; generate the resulting delta.        ",{}]],"14":[["     |  Methods defined here:                                                    ",{}]],"16":[["     |  ",{}],["__init__",{"bold":true}],["(self, linejunk=None, charjunk=None)                             ",{}]],"17":[["     |      Construct a text differencer, with optional filters.                 ",{}]],"18":[["     |                                                                           ",{}]],"19":[["     |      The two optional keyword parameters are for filter functions:        ",{}]],"20":[["     |                                                                           ",{}]],"21":[["     |      - `linejunk`: A function that should accept a single string argument,",{}]],"22":[["     |        and return true iff the string is junk. The module-level function  ",{}]],"23":[["     |        `IS_LINE_JUNK` may be used to filter out lines without visible     ",{}]],"24":[["     |        characters, except for at most one splat ('#').  It is recommended ",{}]],"25":[["     |        to leave linejunk None; as of Python 2.3, the underlying           ",{}]],"26":[["     |        SequenceMatcher class has grown an adaptive notion of \"noise\" lines",{}]],"27":[["     |        that's better than any static definition the author has ever been  ",{}]],"28":[["     |        able to craft.                                                     ",{}]],"29":[["     |                                                                           ",{}]],"30":[["     |      - `charjunk`: A function that should accept a string of length 1. The",{}]],"31":[["     |        module-level function `IS_CHARACTER_JUNK` may be used to filter out",{}]],"32":[["     |        whitespace characters (a blank or tab; **note**: bad idea to includ",{}]],"33":[["e                                                                                ",{}]],"34":[["     |        newline in this!).  Use of IS_CHARACTER_JUNK is recommended.       ",{}]],"35":[["     |                                                                           ",{}]],"36":[["     |  ",{}],["compare",{"bold":true}],["(self, a, b)                                                      ",{}]],"37":[["     |      Compare two sequences of lines; generate the resulting delta.        ",{}]],"38":[["     |                                                                           ",{}]],"39":[["     |      Each sequence must contain individual single-line strings ending with",{}]],"40":[["     |      newlines. Such sequences can be obtained from the `readlines()` metho",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[2.448795,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.0007440000000000001,{"lines":{"0":[["     |  '\\n'                                                                     ",{}]],"1":[["     |  >>> text2 = '''  1. Beautiful is better than ugly.                       ",{}]],"2":[["     |  ...   3.   Simple is better than complex.                                ",{}]],"3":[["     |  ...   4. Complicated is better than complex.                             ",{}]],"4":[["     |  ...   5. Flat is better than nested.                                     ",{}]],"5":[["     |  ... '''.splitlines(1)                                                    ",{}]],"6":[["     |                                                                           ",{}]],"7":[["     |  Next we instantiate a Differ object:                                     ",{}]],"8":[["     |                                                                           ",{}]],"9":[["     |  >>> d = Differ()                                                         ",{}]],"11":[["     |  Note that when instantiating a Differ object we may pass functions to    ",{}]],"12":[["     |  filter out line and character 'junk'.  See Differ.__init__ for details.  ",{}]],"14":[["     |  Finally, we compare the two:                                             ",{}]],"16":[["     |  >>> result = list(d.compare(text1, text2))                               ",{}]],"17":[["     |                                                                           ",{}]],"18":[["     |  'result' is a list of strings, so let's pretty-print it:                 ",{}]],"19":[["     |                                                                           ",{}]],"20":[["     |  >>> from pprint import pprint as _pprint                                 ",{}]],"21":[["     |  >>> _pprint(result)                                                      ",{}]],"22":[["     |  ['    1. Beautiful is better than ugly.\\n',                              ",{}]],"23":[["     |   '-   2. Explicit is better than implicit.\\n',                           ",{}]],"24":[["     |   '-   3. Simple is better than complex.\\n',                              ",{}]],"25":[["     |   '+   3.   Simple is better than complex.\\n',                            ",{}]],"26":[["     |   '?     ++\\n',                                                           ",{}]],"27":[["     |   '-   4. Complex is better than complicated.\\n',                         ",{}]],"28":[["     |   '?            ^                     ---- ^\\n',                          ",{}]],"29":[["     |   '+   4. Complicated is better than complex.\\n',                         ",{}]],"30":[["     |   '?           ++++ ^                      ^\\n',                          ",{}]],"31":[["     |   '+   5. Flat is better than nested.\\n']                                 ",{}]],"32":[["     |                                                                           ",{}]],"33":[["     |  As a single multi-line string it looks like this:                        ",{}]],"34":[["     |                                                                           ",{}]],"35":[["     |  >>> print ''.join(result),                                               ",{}]],"36":[["     |      1. Beautiful is better than ugly.                                    ",{}]],"37":[["     |  -   2. Explicit is better than implicit.                                 ",{}]],"38":[["     |  -   3. Simple is better than complex.                                    ",{}]],"39":[["     |  +   3.   Simple is better than complex.                                  ",{}]],"40":[["     |  ?     ++                                                                 ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.862978,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000705,{"lines":{"0":[["        Match                                                                    ",{}]],"1":[["    Differ                                                                       ",{}]],"2":[["    SequenceMatcher                                                              ",{}]],"3":[["                                                                                 ",{}]],"4":[["    class ",{}],["Differ",{"bold":true}],["                                                                 ",{}]],"5":[["     |  Differ is a class for comparing sequences of lines of text, and          ",{}]],"6":[["     |  producing human-readable differences or deltas.  Differ uses             ",{}]],"7":[["     |  SequenceMatcher both to compare sequences of lines, and to compare       ",{}]],"8":[["     |  sequences of characters within similar (near-matching) lines.            ",{}]],"9":[["     |                                                                           ",{}]],"10":[["     |  Each line of a Differ delta begins with a two-letter code:               ",{}]],"11":[["     |                                                                           ",{}]],"12":[["     |      '- '    line unique to sequence 1                                    ",{}]],"13":[["     |      '+ '    line unique to sequence 2                                    ",{}]],"14":[["     |      '  '    line common to both sequences                                ",{}]],"15":[["     |      '? '    line not present in either input sequence                    ",{}]],"16":[["     |                                                                           ",{}]],"17":[["     |  Lines beginning with '? ' attempt to guide the eye to intraline          ",{}]],"18":[["     |  differences, and were not present in either input sequence.  These lines ",{}]],"19":[["     |  can be confusing if the sequences contain tab characters.                ",{}]],"20":[["     |                                                                           ",{}]],"21":[["     |  Note that Differ makes no claim to produce a *minimal* diff.  To the     ",{}]],"22":[["     |  contrary, minimal diffs are often counter-intuitive, because they synch  ",{}]],"23":[["     |  up anywhere possible, sometimes accidental matches 100 pages apart.      ",{}]],"24":[["     |  Restricting synch points to contiguous matches preserves some notion of  ",{}]],"25":[["     |  locality, at the occasional cost of producing a longer diff.             ",{}]],"26":[["     |                                                                           ",{}]],"27":[["     |  Example: Comparing two texts.                                            ",{}]],"28":[["     |                                                                           ",{}]],"29":[["     |  First we set up the texts, sequences of individual single-line strings   ",{}]],"30":[["     |  ending with newlines (such sequences can also be obtained from the       ",{}]],"31":[["     |  `readlines()` method of file-like objects):                              ",{}]],"33":[["     |  >>> text1 = '''  1. Beautiful is better than ugly.                       ",{}]],"34":[["     |  ...   2. Explicit is better than implicit.                               ",{}]],"35":[["     |  ...   3. Simple is better than complex.                                  ",{}]],"36":[["     |  ...   4. Complex is better than complicated.                             ",{}]],"37":[["     |  ... '''.splitlines(1)                                                    ",{}]],"38":[["     |  >>> len(text1)                                                           ",{}]],"39":[["     |  4                                                                        ",{}]],"40":[["     |  >>> text1[0][-1]                                                         ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[1.127856,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the interprete",{}]],"1":[["r.                                                                               ",{}]],"2":[["vvv@batmobile:~$ python                                                          ",{}]],"3":[["Python 2.7.5 (default, Mar  9 2014, 22:15:05)                                    ",{}]],"4":[["[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin                 ",{}]],"5":[["Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.           ",{}]],"6":[[">>> import difflib                                                               ",{}]],"7":[[">>> help(difflib)                                                                ",{}]],"8":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"10":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"18":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"24":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"27":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"30":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"33":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"36":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"38":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":0,"y":8}}],[0.000819,{"lines":{"9":[[">>>                                                                              ",{}]]},"cursor":{"x":4,"y":9}}],[1.183431,{"lines":{"9":[[">>> help(difflib)                                                                ",{}]]},"cursor":{"x":17}}],[0.759734,{"cursor":{"x":16}}],[0.607792,{"lines":{"9":[[">>> help(difflib.)                                                               ",{}]]},"cursor":{"x":17}}],[0.353246,{"lines":{"9":[[">>> help(difflib.D)                                                              ",{}]]},"cursor":{"x":18}}],[0.319271,{"lines":{"9":[[">>> help(difflib.Di)                                                             ",{}]]},"cursor":{"x":19}}],[0.07993500000000001,{"lines":{"9":[[">>> help(difflib.Dif)                                                            ",{}]]},"cursor":{"x":20}}],[0.128442,{"lines":{"9":[[">>> help(difflib.Diff)                                                           ",{}]]},"cursor":{"x":21}}],[0.127854,{"lines":{"9":[[">>> help(difflib.Diffe)                                                          ",{}]]},"cursor":{"x":22}}],[0.112115,{"lines":{"9":[[">>> help(difflib.Differ)                                                         ",{}]]},"cursor":{"x":23}}],[0.392125,{"cursor":{"x":0,"y":10}}],[0.008368,{"lines":{"0":[["Help on class Differ in module difflib:                                          ",{}]],"1":[["                                                                                 ",{}]],"2":[["class ",{}],["Differ",{"bold":true}],["                                                                     ",{}]],"3":[[" |  Differ is a class for comparing sequences of lines of text, and              ",{}]],"4":[[" |  producing human-readable differences or deltas.  Differ uses                 ",{}]],"5":[[" |  SequenceMatcher both to compare sequences of lines, and to compare           ",{}]],"6":[[" |  sequences of characters within similar (near-matching) lines.                ",{}]],"7":[[" |                                                                               ",{}]],"8":[[" |  Each line of a Differ delta begins with a two-letter code:                   ",{}]],"9":[[" |                                                                               ",{}]],"10":[[" |      '- '    line unique to sequence 1                                        ",{}]],"11":[[" |      '+ '    line unique to sequence 2                                        ",{}]],"12":[[" |      '  '    line common to both sequences                                    ",{}]],"13":[[" |      '? '    line not present in either input sequence                        ",{}]],"14":[[" |                                                                               ",{}]],"15":[[" |  Lines beginning with '? ' attempt to guide the eye to intraline              ",{}]],"16":[[" |  differences, and were not present in either input sequence.  These lines     ",{}]],"17":[[" |  can be confusing if the sequences contain tab characters.                    ",{}]],"18":[[" |                                                                               ",{}]],"19":[[" |  Note that Differ makes no claim to produce a *minimal* diff.  To the         ",{}]],"20":[[" |  contrary, minimal diffs are often counter-intuitive, because they synch      ",{}]],"21":[[" |  up anywhere possible, sometimes accidental matches 100 pages apart.          ",{}]],"22":[[" |  Restricting synch points to contiguous matches preserves some notion of      ",{}]],"23":[[" |  locality, at the occasional cost of producing a longer diff.                 ",{}]],"24":[[" |                                                                               ",{}]],"25":[[" |  Example: Comparing two texts.                                                ",{}]],"26":[[" |                                                                               ",{}]],"27":[[" |  First we set up the texts, sequences of individual single-line strings       ",{}]],"28":[[" |  ending with newlines (such sequences can also be obtained from the           ",{}]],"29":[[" |  `readlines()` method of file-like objects):                                  ",{}]],"30":[[" |                                                                               ",{}]],"31":[[" |  >>> text1 = '''  1. Beautiful is better than ugly.                           ",{}]],"32":[[" |  ...   2. Explicit is better than implicit.                                   ",{}]],"33":[[" |  ...   3. Simple is better than complex.                                      ",{}]],"34":[[" |  ...   4. Complex is better than complicated.                                 ",{}]],"35":[[" |  ... '''.splitlines(1)                                                        ",{}]],"36":[[" |  >>> len(text1)                                                               ",{}]],"37":[[" |  4                                                                            ",{}]],"38":[[" |  >>> text1[0][-1]                                                             ",{}]],"39":[[" |  '\\n'                                                                         ",{}]],"40":[[" |  >>> text2 = '''  1. Beautiful is better than ugly.                           ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1,"y":41}}],[1.087626,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000594,{"lines":{"0":[[" |  ...   3.   Simple is better than complex.                                    ",{}]],"1":[[" |  ...   4. Complicated is better than complex.                                 ",{}]],"2":[[" |  ...   5. Flat is better than nested.                                         ",{}]],"3":[[" |  ... '''.splitlines(1)                                                        ",{}]],"4":[[" |                                                                               ",{}]],"5":[[" |  Next we instantiate a Differ object:                                         ",{}]],"6":[[" |                                                                               ",{}]],"7":[[" |  >>> d = Differ()                                                             ",{}]],"8":[[" |                                                                               ",{}]],"9":[[" |  Note that when instantiating a Differ object we may pass functions to        ",{}]],"10":[[" |  filter out line and character 'junk'.  See Differ.__init__ for details.      ",{}]],"11":[[" |                                                                               ",{}]],"12":[[" |  Finally, we compare the two:                                                 ",{}]],"13":[[" |                                                                               ",{}]],"14":[[" |  >>> result = list(d.compare(text1, text2))                                   ",{}]],"15":[[" |                                                                               ",{}]],"16":[[" |  'result' is a list of strings, so let's pretty-print it:                     ",{}]],"17":[[" |                                                                               ",{}]],"18":[[" |  >>> from pprint import pprint as _pprint                                     ",{}]],"19":[[" |  >>> _pprint(result)                                                          ",{}]],"20":[[" |  ['    1. Beautiful is better than ugly.\\n',                                  ",{}]],"21":[[" |   '-   2. Explicit is better than implicit.\\n',                               ",{}]],"22":[[" |   '-   3. Simple is better than complex.\\n',                                  ",{}]],"23":[[" |   '+   3.   Simple is better than complex.\\n',                                ",{}]],"24":[[" |   '?     ++\\n',                                                               ",{}]],"25":[[" |   '-   4. Complex is better than complicated.\\n',                             ",{}]],"26":[[" |   '?            ^                     ---- ^\\n',                              ",{}]],"27":[[" |   '+   4. Complicated is better than complex.\\n',                             ",{}]],"28":[[" |   '?           ++++ ^                      ^\\n',                              ",{}]],"29":[[" |   '+   5. Flat is better than nested.\\n']                                     ",{}]],"31":[[" |  As a single multi-line string it looks like this:                            ",{}]],"32":[[" |                                                                               ",{}]],"33":[[" |  >>> print ''.join(result),                                                   ",{}]],"34":[[" |      1. Beautiful is better than ugly.                                        ",{}]],"35":[[" |  -   2. Explicit is better than implicit.                                     ",{}]],"36":[[" |  -   3. Simple is better than complex.                                        ",{}]],"37":[[" |  +   3.   Simple is better than complex.                                      ",{}]],"38":[[" |  ?     ++                                                                     ",{}]],"39":[[" |  -   4. Complex is better than complicated.                                   ",{}]],"40":[[" |  ?            ^                     ---- ^                                    ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.127327,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.0007160000000000001,{"lines":{"0":[[" |  +   4. Complicated is better than complex.                                   ",{}]],"1":[[" |  ?           ++++ ^                      ^                                    ",{}]],"2":[[" |  +   5. Flat is better than nested.                                           ",{}]],"3":[[" |                                                                               ",{}]],"4":[[" |  Methods:                                                                     ",{}]],"5":[[" |                                                                               ",{}]],"6":[[" |  __init__(linejunk=None, charjunk=None)                                       ",{}]],"7":[[" |      Construct a text differencer, with optional filters.                     ",{}]],"9":[[" |  compare(a, b)                                                                ",{}]],"10":[[" |      Compare two sequences of lines; generate the resulting delta.            ",{}]],"12":[[" |  Methods defined here:                                                        ",{}]],"14":[[" |  ",{}],["__init__",{"bold":true}],["(self, linejunk=None, charjunk=None)                                 ",{}]],"15":[[" |      Construct a text differencer, with optional filters.                     ",{}]],"16":[[" |                                                                               ",{}]],"17":[[" |      The two optional keyword parameters are for filter functions:            ",{}]],"18":[[" |                                                                               ",{}]],"19":[[" |      - `linejunk`: A function that should accept a single string argument,    ",{}]],"20":[[" |        and return true iff the string is junk. The module-level function      ",{}]],"21":[[" |        `IS_LINE_JUNK` may be used to filter out lines without visible         ",{}]],"22":[[" |        characters, except for at most one splat ('#').  It is recommended     ",{}]],"23":[[" |        to leave linejunk None; as of Python 2.3, the underlying               ",{}]],"24":[[" |        SequenceMatcher class has grown an adaptive notion of \"noise\" lines    ",{}]],"25":[[" |        that's better than any static definition the author has ever been      ",{}]],"26":[[" |        able to craft.                                                         ",{}]],"27":[[" |                                                                               ",{}]],"28":[[" |      - `charjunk`: A function that should accept a string of length 1. The    ",{}]],"29":[[" |        module-level function `IS_CHARACTER_JUNK` may be used to filter out    ",{}]],"30":[[" |        whitespace characters (a blank or tab; **note**: bad idea to include   ",{}]],"31":[[" |        newline in this!).  Use of IS_CHARACTER_JUNK is recommended.           ",{}]],"33":[[" |  ",{}],["compare",{"bold":true}],["(self, a, b)                                                          ",{}]],"34":[[" |      Compare two sequences of lines; generate the resulting delta.            ",{}]],"35":[[" |                                                                               ",{}]],"36":[[" |      Each sequence must contain individual single-line strings ending with    ",{}]],"37":[[" |      newlines. Such sequences can be obtained from the `readlines()` method   ",{}]],"38":[[" |      of file-like objects.  The delta generated also consists of newline-     ",{}]],"39":[[" |      terminated strings, ready to be printed as-is via the writeline()        ",{}]],"40":[[" |      method of a file-like object.                                            ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.135499,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000197,{"lines":{"0":[[" |  ",{}],["__init__",{"bold":true}],["(self, linejunk=None, charjunk=None)                                 ",{}]],"1":[[" |      Construct a text differencer, with optional filters.                     ",{}]],"2":[[" |                                                                               ",{}]],"3":[[" |      The two optional keyword parameters are for filter functions:            ",{}]],"4":[[" |                                                                               ",{}]],"5":[[" |      - `linejunk`: A function that should accept a single string argument,    ",{}]],"6":[[" |        and return true iff the string is junk. The module-level function      ",{}]],"7":[[" |        `IS_LINE_JUNK` may be used to filter out lines without visible         ",{}]],"8":[[" |        characters, except for at most one splat ('#').  It is recommended     ",{}]],"9":[[" |        to leave linejunk None; as of Python 2.3, the underlying               ",{}]],"10":[[" |        SequenceMatcher class has grown an adaptive notion of \"noise\" lines    ",{}]],"11":[[" |        that's better than any static definition the author has ever been      ",{}]],"12":[[" |        able to craft.                                                         ",{}]],"14":[[" |      - `charjunk`: A function that should accept a string of length 1. The    ",{}]],"15":[[" |        module-level function `IS_CHARACTER_JUNK` may be used to filter out    ",{}]],"16":[[" |        whitespace characters (a blank or tab; **note**: bad idea to include   ",{}]],"17":[[" |        newline in this!).  Use of IS_CHARACTER_JUNK is recommended.           ",{}]],"19":[[" |  ",{}],["compare",{"bold":true}],["(self, a, b)                                                          ",{}]],"20":[[" |      Compare two sequences of lines; generate the resulting delta.            ",{}]],"21":[[" |                                                                               ",{}]],"22":[[" |      Each sequence must contain individual single-line strings ending with    ",{}]],"23":[[" |      newlines. Such sequences can be obtained from the `readlines()` method   ",{}]],"24":[[" |      of file-like objects.  The delta generated also consists of newline-     ",{}]],"25":[[" |      terminated strings, ready to be printed as-is via the writeline()        ",{}]],"26":[[" |      method of a file-like object.                                            ",{}]],"28":[[" |      Example:                                                                 ",{}]],"29":[[" |                                                                               ",{}]],"30":[[" |      >>> print ''.join(Differ().compare('one\\ntwo\\nthree\\n'.splitlines(1),    ",{}]],"31":[[" |      ...                                'ore\\ntree\\nemu\\n'.splitlines(1))),   ",{}]],"32":[[" |      - one                                                                    ",{}]],"33":[[" |      ?  ^                                                                     ",{}]],"34":[[" |      + ore                                                                    ",{}]],"35":[[" |      ?  ^                                                                     ",{}]],"36":[[" |      - two                                                                    ",{}]],"37":[[" |      - three                                                                  ",{}]],"38":[[" |      ?  -                                                                     ",{}]],"39":[[" |      + tree                                                                   ",{}]],"40":[[" |      + emu                                                                    ",{}]],"41":[["(END) ",{"inverse":true}],["                                                                           ",{}]]},"cursor":{"x":6}}],[0.935494,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the interprete",{}]],"1":[["r.                                                                               ",{}]],"2":[["vvv@batmobile:~$ python                                                          ",{}]],"3":[["Python 2.7.5 (default, Mar  9 2014, 22:15:05)                                    ",{}]],"4":[["[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin                 ",{}]],"5":[["Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.           ",{}]],"6":[[">>> import difflib                                                               ",{}]],"7":[[">>> help(difflib)                                                                ",{}]],"8":[["                                                                                 ",{}]],"9":[[">>> help(difflib.Differ)                                                         ",{}]],"10":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"18":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"24":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"27":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"30":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"33":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"36":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"38":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":0,"y":10}}],[0.000481,{"lines":{"11":[[">>>                                                                              ",{}]]},"cursor":{"x":4,"y":11}}],[0.664327,{"lines":{"11":[[">>> d                                                                            ",{}]]},"cursor":{"x":5}}],[0.055699,{"lines":{"11":[[">>> di                                                                           ",{}]]},"cursor":{"x":6}}],[0.111821,{"lines":{"11":[[">>> dir                                                                          ",{}]]},"cursor":{"x":7}}],[0.256347,{"lines":{"11":[[">>> dir(                                                                         ",{}]]},"cursor":{"x":8}}],[0.52014,{"lines":{"11":[[">>> dir(d                                                                        ",{}]]},"cursor":{"x":9}}],[0.072147,{"lines":{"11":[[">>> dir(di                                                                       ",{}]]},"cursor":{"x":10}}],[0.087938,{"lines":{"11":[[">>> dir(dif                                                                      ",{}]]},"cursor":{"x":11}}],[0.128066,{"lines":{"11":[[">>> dir(diff                                                                     ",{}]]},"cursor":{"x":12}}],[0.136099,{"lines":{"11":[[">>> dir(diffl                                                                    ",{}]]},"cursor":{"x":13}}],[0.071848,{"lines":{"11":[[">>> dir(diffli                                                                   ",{}]]},"cursor":{"x":14}}],[0.103691,{"lines":{"11":[[">>> dir(difflib                                                                  ",{}]]},"cursor":{"x":15}}],[0.287973,{"lines":{"11":[[">>> dir(difflib)                                                                 ",{}]]},"cursor":{"x":16}}],[0.20015,{"cursor":{"x":0,"y":12}}],[0.00044,{"lines":{"12":[["['Differ', 'HtmlDiff', 'IS_CHARACTER_JUNK', 'IS_LINE_JUNK', 'Match', 'SequenceMat",{}]],"13":[["cher', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__",{}]],"14":[["', '_calculate_ratio', '_count_leading', '_file_template', '_format_range_context",{}]],"15":[["', '_format_range_unified', '_legend', '_mdiff', '_namedtuple', '_styles', '_tabl",{}]],"16":[["e_template', '_test', 'context_diff', 'get_close_matches', 'heapq', 'ndiff', 'red",{}]],"17":[["uce', 'restore', 'unified_diff']                                                 ",{}]],"18":[[">>>                                                                              ",{}]]},"cursor":{"x":4,"y":18}}],[2.839974,{"lines":{"18":[[">>> dir(difflib)                                                                 ",{}]]},"cursor":{"x":16}}],[1.064441,{"cursor":{"x":15}}],[0.279915,{"lines":{"18":[[">>> dir(difflib.)                                                                ",{}]]},"cursor":{"x":16}}],[0.376179,{"lines":{"18":[[">>> dir(difflib.M)                                                               ",{}]]},"cursor":{"x":17}}],[0.264509,{"lines":{"18":[[">>> dir(difflib.Ma)                                                              ",{}]]},"cursor":{"x":18}}],[0.15937,{"lines":{"18":[[">>> dir(difflib.Mat)                                                             ",{}]]},"cursor":{"x":19}}],[0.208038,{"lines":{"18":[[">>> dir(difflib.Matc)                                                            ",{}]]},"cursor":{"x":20}}],[0.040273,{"lines":{"18":[[">>> dir(difflib.Match)                                                           ",{}]]},"cursor":{"x":21}}],[0.296317,{"cursor":{"x":0,"y":19}}],[0.000622,{"lines":{"19":[["['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__f",{}]],"20":[["ormat__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getsl",{}]],"21":[["ice__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt_",{}]],"22":[["_', '__module__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', ",{}]],"23":[["'__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__s",{}]],"24":[["ubclasshook__', '_asdict', '_fields', '_make', '_replace', 'a', 'b', 'count', 'in",{}]],"25":[["dex', 'size']                                                                    ",{}]],"26":[[">>>                                                                              ",{}]]},"cursor":{"x":4,"y":26}}],[0.838718,{"lines":{"26":[[">>> dir(difflib.Match)                                                           ",{}]]},"cursor":{"x":22}}],[0.313289,{"cursor":{"x":4}}],[0.303819,{"lines":{"26":[[">>> (difflib.Match)                                                              ",{}]]}}],[0.503629,{"lines":{"26":[[">>> h(difflib.Match)                                                             ",{}]]},"cursor":{"x":5}}],[0.056395,{"lines":{"26":[[">>> he(difflib.Match)                                                            ",{}]]},"cursor":{"x":6}}],[0.08754000000000001,{"lines":{"26":[[">>> hel(difflib.Match)                                                           ",{}]]},"cursor":{"x":7}}],[0.119887,{"lines":{"26":[[">>> help(difflib.Match)                                                          ",{}]]},"cursor":{"x":8}}],[0.319799,{"cursor":{"x":0,"y":27}}],[0.007228,{"lines":{"0":[["Help on class Match in module difflib:                                           ",{}]],"1":[["                                                                                 ",{}]],"2":[["class ",{}],["Match",{"bold":true}],["(__builtin__.tuple)                                                   ",{}]],"3":[[" |  Match(a, b, size)                                                            ",{}]],"4":[[" |                                                                               ",{}]],"5":[[" |  Method resolution order:                                                     ",{}]],"6":[[" |      Match                                                                    ",{}]],"7":[[" |      __builtin__.tuple                                                        ",{}]],"8":[[" |      __builtin__.object                                                       ",{}]],"9":[[" |                                                                               ",{}]],"10":[[" |  Methods defined here:                                                        ",{}]],"11":[[" |                                                                               ",{}]],"12":[[" |  ",{}],["__getnewargs__",{"bold":true}],["(self)                                                         ",{}]],"13":[[" |      Return self as a plain tuple.  Used by copy and pickle.                  ",{}]],"14":[[" |                                                                               ",{}]],"15":[[" |  ",{}],["__repr__",{"bold":true}],["(self)                                                               ",{}]],"16":[[" |      Return a nicely formatted representation string                          ",{}]],"17":[[" |                                                                               ",{}]],"18":[[" |  ",{}],["_asdict",{"bold":true}],["(self)                                                                ",{}]],"19":[[" |      Return a new OrderedDict which maps field names to their values          ",{}]],"20":[[" |                                                                               ",{}]],"21":[[" |  ",{}],["_replace",{"bold":true}],["(_self, **kwds)                                                      ",{}]],"22":[[" |      Return a new Match object replacing specified fields with new values     ",{}]],"23":[[" |                                                                               ",{}]],"24":[[" |  ----------------------------------------------------------------------       ",{}]],"25":[[" |  Class methods defined here:                                                  ",{}]],"26":[[" |                                                                               ",{}]],"27":[[" |  ",{}],["_make",{"bold":true}],["(cls, iterable, new=<built-in method __new__ of type object>, len=<built",{}]],"28":[["-in function len>) from __builtin__.type                                         ",{}]],"29":[[" |      Make a new Match object from a sequence or iterable                      ",{}]],"30":[[" |                                                                               ",{}]],"31":[[" |  ----------------------------------------------------------------------       ",{}]],"32":[[" |  Static methods defined here:                                                 ",{}]],"33":[[" |                                                                               ",{}]],"34":[[" |  ",{}],["__new__",{"bold":true}],["(_cls, a, b, size)                                                    ",{}]],"35":[[" |      Create new instance of Match(a, b, size)                                 ",{}]],"36":[[" |                                                                               ",{}]],"37":[[" |  ----------------------------------------------------------------------       ",{}]],"38":[[" |  Data descriptors defined here:                                               ",{}]],"39":[[" |                                                                               ",{}]],"40":[[" |  ",{}],["a",{"bold":true}],["                                                                            ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1,"y":41}}],[1.409293,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000332,{"lines":{"0":[[" |      Alias for field number 0                                                 ",{}]],"1":[[" |                                                                               ",{}]],"2":[[" |  ",{}],["b",{"bold":true}],["                                                                            ",{}]],"3":[[" |      Alias for field number 1                                                 ",{}]],"5":[[" |  ",{}],["size",{"bold":true}],["                                                                         ",{}]],"6":[[" |      Alias for field number 2                                                 ",{}]],"7":[[" |                                                                               ",{}]],"8":[[" |  ----------------------------------------------------------------------       ",{}]],"9":[[" |  Data and other attributes defined here:                                      ",{}]],"10":[[" |                                                                               ",{}]],"11":[[" |  ",{}],["_fields",{"bold":true}],[" = ('a', 'b', 'size')                                                 ",{}]],"12":[[" |                                                                               ",{}]],"13":[[" |  ----------------------------------------------------------------------       ",{}]],"14":[[" |  Methods inherited from __builtin__.tuple:                                    ",{}]],"15":[[" |                                                                               ",{}]],"16":[[" |  ",{}],["__add__",{"bold":true}],["(...)                                                                 ",{}]],"17":[[" |      x.__add__(y) <==> x+y                                                    ",{}]],"18":[[" |                                                                               ",{}]],"19":[[" |  ",{}],["__contains__",{"bold":true}],["(...)                                                            ",{}]],"20":[[" |      x.__contains__(y) <==> y in x                                            ",{}]],"21":[[" |                                                                               ",{}]],"22":[[" |  ",{}],["__eq__",{"bold":true}],["(...)                                                                  ",{}]],"23":[[" |      x.__eq__(y) <==> x==y                                                    ",{}]],"24":[[" |                                                                               ",{}]],"25":[[" |  ",{}],["__ge__",{"bold":true}],["(...)                                                                  ",{}]],"26":[[" |      x.__ge__(y) <==> x>=y                                                    ",{}]],"27":[[" |                                                                               ",{}]],"28":[[" |  ",{}],["__getattribute__",{"bold":true}],["(...)                                                        ",{}]],"29":[[" |      x.__getattribute__('name') <==> x.name                                   ",{}]],"31":[[" |  ",{}],["__getitem__",{"bold":true}],["(...)                                                             ",{}]],"32":[[" |      x.__getitem__(y) <==> x[y]                                               ",{}]],"34":[[" |  ",{}],["__getslice__",{"bold":true}],["(...)                                                            ",{}]],"35":[[" |      x.__getslice__(i, j) <==> x[i:j]                                         ",{}]],"37":[[" |      Use of negative indices is not supported.                                ",{}]],"38":[[" |                                                                               ",{}]],"39":[[" |  ",{}],["__gt__",{"bold":true}],["(...)                                                                  ",{}]],"40":[[" |      x.__gt__(y) <==> x>y                                                     ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.168434,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000415,{"lines":{"0":[[" |      x.__getslice__(i, j) <==> x[i:j]                                         ",{}]],"2":[[" |      Use of negative indices is not supported.                                ",{}]],"3":[[" |                                                                               ",{}]],"4":[[" |  ",{}],["__gt__",{"bold":true}],["(...)                                                                  ",{}]],"5":[[" |      x.__gt__(y) <==> x>y                                                     ",{}]],"6":[[" |                                                                               ",{}]],"7":[[" |  ",{}],["__hash__",{"bold":true}],["(...)                                                                ",{}]],"8":[[" |      x.__hash__() <==> hash(x)                                                ",{}]],"9":[[" |                                                                               ",{}]],"10":[[" |  ",{}],["__iter__",{"bold":true}],["(...)                                                                ",{}]],"11":[[" |      x.__iter__() <==> iter(x)                                                ",{}]],"13":[[" |  ",{}],["__le__",{"bold":true}],["(...)                                                                  ",{}]],"14":[[" |      x.__le__(y) <==> x<=y                                                    ",{}]],"16":[[" |  ",{}],["__len__",{"bold":true}],["(...)                                                                 ",{}]],"17":[[" |      x.__len__() <==> len(x)                                                  ",{}]],"19":[[" |  ",{}],["__lt__",{"bold":true}],["(...)                                                                  ",{}]],"20":[[" |      x.__lt__(y) <==> x<y                                                     ",{}]],"22":[[" |  ",{}],["__mul__",{"bold":true}],["(...)                                                                 ",{}]],"23":[[" |      x.__mul__(n) <==> x*n                                                    ",{}]],"25":[[" |  ",{}],["__ne__",{"bold":true}],["(...)                                                                  ",{}]],"26":[[" |      x.__ne__(y) <==> x!=y                                                    ",{}]],"28":[[" |  ",{}],["__rmul__",{"bold":true}],["(...)                                                                ",{}]],"29":[[" |      x.__rmul__(n) <==> n*x                                                   ",{}]],"31":[[" |  ",{}],["__sizeof__",{"bold":true}],["(...)                                                              ",{}]],"32":[[" |      T.__sizeof__() -- size of T in memory, in bytes                          ",{}]],"34":[[" |  ",{}],["count",{"bold":true}],["(...)                                                                   ",{}]],"35":[[" |      T.count(value) -> integer -- return number of occurrences of value       ",{}]],"37":[[" |  ",{}],["index",{"bold":true}],["(...)                                                                   ",{}]],"38":[[" |      T.index(value, [start, [stop]]) -> integer -- return first index of value",{}]],"39":[[".                                                                                ",{}]],"40":[[" |      Raises ValueError if the value is not present.                           ",{}]],"41":[["(END) ",{"inverse":true}],["                                                                           ",{}]]},"cursor":{"x":6}}],[0.150969,{}],[0.608488,{"lines":{"0":[["vvv@batmobile:~$ # Now let's try reading documentation from within the interprete",{}]],"1":[["r.                                                                               ",{}]],"2":[["vvv@batmobile:~$ python                                                          ",{}]],"3":[["Python 2.7.5 (default, Mar  9 2014, 22:15:05)                                    ",{}]],"4":[["[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin                 ",{}]],"5":[["Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.           ",{}]],"6":[[">>> import difflib                                                               ",{}]],"7":[[">>> help(difflib)                                                                ",{}]],"8":[["                                                                                 ",{}]],"9":[[">>> help(difflib.Differ)                                                         ",{}]],"10":[["                                                                                 ",{}]],"11":[[">>> dir(difflib)                                                                 ",{}]],"12":[["['Differ', 'HtmlDiff', 'IS_CHARACTER_JUNK', 'IS_LINE_JUNK', 'Match', 'SequenceMat",{}]],"13":[["cher', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__",{}]],"14":[["', '_calculate_ratio', '_count_leading', '_file_template', '_format_range_context",{}]],"15":[["', '_format_range_unified', '_legend', '_mdiff', '_namedtuple', '_styles', '_tabl",{}]],"16":[["e_template', '_test', 'context_diff', 'get_close_matches', 'heapq', 'ndiff', 'red",{}]],"17":[["uce', 'restore', 'unified_diff']                                                 ",{}]],"18":[[">>> dir(difflib.Match)                                                           ",{}]],"19":[["['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__f",{}]],"20":[["ormat__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getsl",{}]],"21":[["ice__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt_",{}]],"22":[["_', '__module__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', ",{}]],"23":[["'__repr__', '__rmul__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__s",{}]],"24":[["ubclasshook__', '_asdict', '_fields', '_make', '_replace', 'a', 'b', 'count', 'in",{}]],"25":[["dex', 'size']                                                                    ",{}]],"26":[[">>> help(difflib.Match)                                                          ",{}]],"27":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"30":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"33":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"36":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"38":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":0,"y":27}}],[0.000508,{"lines":{"28":[[">>>                                                                              ",{}]]},"cursor":{"x":4,"y":28}}],[3.063452,{"lines":{"28":[[">>> i                                                                            ",{}]]},"cursor":{"x":5}}],[0.071871,{"lines":{"28":[[">>> im                                                                           ",{}]]},"cursor":{"x":6}}],[0.120637,{"lines":{"28":[[">>> imp                                                                          ",{}]]},"cursor":{"x":7}}],[0.127954,{"lines":{"28":[[">>> impo                                                                         ",{}]]},"cursor":{"x":8}}],[0.111915,{"lines":{"28":[[">>> impor                                                                        ",{}]]},"cursor":{"x":9}}],[0.199711,{"lines":{"28":[[">>> import                                                                       ",{}]]},"cursor":{"x":10}}],[0.080777,{"cursor":{"x":11}}],[0.43957,{"lines":{"0":[[">>> import                                                                       ",{}]],"1":[["                                                                                 ",{}]],"2":[["                                                                                 ",{}]],"3":[["                                                                                 ",{}]],"4":[["                                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"18":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"24":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]]},"cursor":{"y":0}}],[0.360212,{"lines":{"0":[[">>> import o                                                                     ",{}]]},"cursor":{"x":12}}],[0.07961,{"lines":{"0":[[">>> import op                                                                    ",{}]]},"cursor":{"x":13}}],[0.200902,{"lines":{"0":[[">>> import opt                                                                   ",{}]]},"cursor":{"x":14}}],[0.384314,{"lines":{"0":[[">>> import optp                                                                  ",{}]]},"cursor":{"x":15}}],[0.199859,{"lines":{"0":[[">>> import optpa                                                                 ",{}]]},"cursor":{"x":16}}],[0.144406,{"lines":{"0":[[">>> import optpar                                                                ",{}]]},"cursor":{"x":17}}],[0.127419,{"lines":{"0":[[">>> import optpars                                                               ",{}]]},"cursor":{"x":18}}],[0.111892,{"lines":{"0":[[">>> import optparse                                                              ",{}]]},"cursor":{"x":19}}],[0.335389,{"cursor":{"x":0,"y":1}}],[0.00792,{"lines":{"1":[[">>>                                                                              ",{}]]},"cursor":{"x":4}}],[0.600342,{"lines":{"1":[[">>> h                                                                            ",{}]]},"cursor":{"x":5}}],[0.064654,{"lines":{"1":[[">>> he                                                                           ",{}]]},"cursor":{"x":6}}],[0.08746,{"lines":{"1":[[">>> hel                                                                          ",{}]]},"cursor":{"x":7}}],[0.104231,{"lines":{"1":[[">>> help                                                                         ",{}]]},"cursor":{"x":8}}],[0.255813,{"lines":{"1":[[">>> help(                                                                        ",{}]]},"cursor":{"x":9}}],[0.31259,{"lines":{"1":[[">>> help(o                                                                       ",{}]]},"cursor":{"x":10}}],[0.144277,{"lines":{"1":[[">>> help(op                                                                      ",{}]]},"cursor":{"x":11}}],[0.5193759999999999,{"lines":{"1":[[">>> help(opt                                                                     ",{}]]},"cursor":{"x":12}}],[0.496004,{"lines":{"1":[[">>> help(optp                                                                    ",{}]]},"cursor":{"x":13}}],[0.080153,{"lines":{"1":[[">>> help(optpa                                                                   ",{}]]},"cursor":{"x":14}}],[0.168408,{"lines":{"1":[[">>> help(optpar                                                                  ",{}]]},"cursor":{"x":15}}],[0.127949,{"lines":{"1":[[">>> help(optpars                                                                 ",{}]]},"cursor":{"x":16}}],[0.0965,{"lines":{"1":[[">>> help(optparse                                                                ",{}]]},"cursor":{"x":17}}],[0.327962,{"lines":{"1":[[">>> help(optparse)                                                               ",{}]]},"cursor":{"x":18}}],[0.223385,{"cursor":{"x":0,"y":2}}],[0.040218,{"lines":{"0":[["                                                                                 ",{}]],"1":[["                                                                                 ",{}]]}}],[0.000182,{"lines":{"0":[["Help on module optparse:                                                         ",{}]],"2":[["NAME",{"bold":true}],["                                                                             ",{}]],"3":[["    optparse - A powerful, extensible, and easy-to-use option parser.            ",{}]],"5":[["FILE",{"bold":true}],["                                                                             ",{}]],"6":[["    /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/optpar",{}]],"7":[["se.py                                                                            ",{}]],"9":[["MODULE DOCS",{"bold":true}],["                                                                      ",{}]],"10":[["    http://docs.python.org/library/optparse                                      ",{}]],"12":[["DESCRIPTION",{"bold":true}],["                                                                      ",{}]],"13":[["    By Greg Ward <gward@python.net>                                              ",{}]],"15":[["    Originally distributed as Optik.                                             ",{}]],"17":[["    For support, use the optik-users@lists.sourceforge.net mailing list          ",{}]],"18":[["    (http://lists.sourceforge.net/lists/listinfo/optik-users).                   ",{}]],"20":[["    Simple usage example:                                                        ",{}]],"22":[["       from optparse import OptionParser                                         ",{}]],"24":[["       parser = OptionParser()                                                   ",{}]],"25":[["       parser.add_option(\"-f\", \"--file\", dest=\"filename\",                        ",{}]],"26":[["                         help=\"write report to FILE\", metavar=\"FILE\")            ",{}]],"27":[["       parser.add_option(\"-q\", \"--quiet\",                                        ",{}]],"28":[["                         action=\"store_false\", dest=\"verbose\", default=True,     ",{}]],"29":[["                         help=\"don't print status messages to stdout\")           ",{}]],"31":[["       (options, args) = parser.parse_args()                                     ",{}]],"33":[["CLASSES",{"bold":true}],["                                                                          ",{}]],"34":[["    exceptions.Exception(exceptions.BaseException)                               ",{}]],"35":[["        OptParseError                                                            ",{}]],"36":[["            BadOptionError                                                       ",{}]],"37":[["            OptionError                                                          ",{}]],"38":[["                OptionConflictError                                              ",{}]],"39":[["            OptionValueError                                                     ",{}]],"40":[["    HelpFormatter                                                                ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1,"y":41}}],[0.688489,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.00065,{"lines":{"0":[["        IndentedHelpFormatter                                                    ",{}]],"1":[["        TitledHelpFormatter                                                      ",{}]],"2":[["    Option                                                                       ",{}]],"3":[["    OptionContainer                                                              ",{}]],"4":[["        OptionGroup                                                              ",{}]],"5":[["        OptionParser                                                             ",{}]],"6":[["    Values                                                                       ",{}]],"7":[["                                                                                 ",{}]],"8":[["    class ",{}],["BadOptionError",{"bold":true}],["(OptParseError)                                          ",{}]],"9":[["     |  Raised if an invalid option is seen on the command line.                 ",{}]],"10":[["     |                                                                           ",{}]],"11":[["     |  Method resolution order:                                                 ",{}]],"12":[["     |      BadOptionError                                                       ",{}]],"13":[["     |      OptParseError                                                        ",{}]],"14":[["     |      exceptions.Exception                                                 ",{}]],"15":[["     |      exceptions.BaseException                                             ",{}]],"16":[["     |      __builtin__.object                                                   ",{}]],"17":[["     |                                                                           ",{}]],"18":[["     |  Methods defined here:                                                    ",{}]],"19":[["     |                                                                           ",{}]],"20":[["     |  ",{}],["__init__",{"bold":true}],["(self, opt_str)                                                  ",{}]],"21":[["     |                                                                           ",{}]],"22":[["     |  ",{}],["__str__",{"bold":true}],["(self)                                                            ",{}]],"23":[["     |                                                                           ",{}]],"24":[["     |  ----------------------------------------------------------------------   ",{}]],"25":[["     |  Data descriptors inherited from OptParseError:                           ",{}]],"26":[["     |                                                                           ",{}]],"27":[["     |  ",{}],["__weakref__",{"bold":true}],["                                                              ",{}]],"28":[["     |      list of weak references to the object (if defined)                   ",{}]],"29":[["     |                                                                           ",{}]],"30":[["     |  ----------------------------------------------------------------------   ",{}]],"31":[["     |  Data and other attributes inherited from exceptions.Exception:           ",{}]],"32":[["     |                                                                           ",{}]],"33":[["     |  ",{}],["__new__",{"bold":true}],[" = <built-in method __new__ of type object>                       ",{}]],"34":[["     |      T.__new__(S, ...) -> a new object with type S, a subtype of T        ",{}]],"35":[["     |                                                                           ",{}]],"36":[["     |  ----------------------------------------------------------------------   ",{}]],"37":[["     |  Methods inherited from exceptions.BaseException:                         ",{}]],"38":[["     |                                                                           ",{}]],"39":[["     |  ",{}],["__delattr__",{"bold":true}],["(...)                                                         ",{}]],"40":[["     |      x.__delattr__('name') <==> del x.name                                ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.142229,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000247,{"lines":{"0":[["     |                                                                           ",{}]],"1":[["     |  ",{}],["__getattribute__",{"bold":true}],["(...)                                                    ",{}]],"2":[["     |      x.__getattribute__('name') <==> x.name                               ",{}]],"3":[["     |                                                                           ",{}]],"4":[["     |  ",{}],["__getitem__",{"bold":true}],["(...)                                                         ",{}]],"5":[["     |      x.__getitem__(y) <==> x[y]                                           ",{}]],"6":[["     |                                                                           ",{}]],"7":[["     |  ",{}],["__getslice__",{"bold":true}],["(...)                                                        ",{}]],"8":[["     |      x.__getslice__(i, j) <==> x[i:j]                                     ",{}]],"9":[["     |                                                                           ",{}]],"10":[["     |      Use of negative indices is not supported.                            ",{}]],"11":[["     |                                                                           ",{}]],"12":[["     |  ",{}],["__reduce__",{"bold":true}],["(...)                                                          ",{}]],"13":[["     |                                                                           ",{}]],"14":[["     |  ",{}],["__repr__",{"bold":true}],["(...)                                                            ",{}]],"15":[["     |      x.__repr__() <==> repr(x)                                            ",{}]],"16":[["     |                                                                           ",{}]],"17":[["     |  ",{}],["__setattr__",{"bold":true}],["(...)                                                         ",{}]],"18":[["     |      x.__setattr__('name', value) <==> x.name = value                     ",{}]],"20":[["     |  ",{}],["__setstate__",{"bold":true}],["(...)                                                        ",{}]],"22":[["     |  ",{}],["__unicode__",{"bold":true}],["(...)                                                         ",{}]],"25":[["     |  Data descriptors inherited from exceptions.BaseException:                ",{}]],"27":[["     |  ",{}],["__dict__",{"bold":true}],["                                                                 ",{}]],"28":[["     |                                                                           ",{}]],"29":[["     |  ",{}],["args",{"bold":true}],["                                                                     ",{}]],"30":[["     |                                                                           ",{}]],"31":[["     |  ",{}],["message",{"bold":true}],["                                                                  ",{}]],"32":[["                                                                                 ",{}]],"33":[["    class ",{}],["HelpFormatter",{"bold":true}],["                                                          ",{}]],"34":[["     |  Abstract base class for formatting option help.  OptionParser            ",{}]],"35":[["     |  instances should use one of the HelpFormatter subclasses for             ",{}]],"36":[["     |  formatting help; by default IndentedHelpFormatter is used.               ",{}]],"37":[["     |                                                                           ",{}]],"38":[["     |  Instance attributes:                                                     ",{}]],"39":[["     |    parser : OptionParser                                                  ",{}]],"40":[["     |      the controlling OptionParser instance                                ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.112486,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000521,{"lines":{"0":[["     |    indent_increment : int                                                 ",{}]],"1":[["     |      the number of columns to indent per nesting level                    ",{}]],"2":[["     |    max_help_position : int                                                ",{}]],"3":[["     |      the maximum starting column for option help text                     ",{}]],"4":[["     |    help_position : int                                                    ",{}]],"5":[["     |      the calculated starting column for option help text;                 ",{}]],"6":[["     |      initially the same as the maximum                                    ",{}]],"7":[["     |    width : int                                                            ",{}]],"8":[["     |      total number of columns for output (pass None to constructor for     ",{}]],"9":[["     |      this value to be taken from the $COLUMNS environment variable)       ",{}]],"10":[["     |    level : int                                                            ",{}]],"11":[["     |      current indentation level                                            ",{}]],"12":[["     |    current_indent : int                                                   ",{}]],"13":[["     |      current indentation level (in columns)                               ",{}]],"14":[["     |    help_width : int                                                       ",{}]],"15":[["     |      number of columns available for option help text (calculated)        ",{}]],"16":[["     |    default_tag : str                                                      ",{}]],"17":[["     |      text to replace with each option's default value, \"%default\"         ",{}]],"18":[["     |      by default.  Set to false value to disable default value expansion.  ",{}]],"19":[["     |    option_strings : { Option : str }                                      ",{}]],"20":[["     |      maps Option instances to the snippet of help text explaining         ",{}]],"21":[["     |      the syntax of that option, e.g. \"-h, --help\" or                      ",{}]],"22":[["     |      \"-fFILE, --file=FILE\"                                                ",{}]],"23":[["     |    _short_opt_fmt : str                                                   ",{}]],"24":[["     |      format string controlling how short options with values are          ",{}]],"25":[["     |      printed in help text.  Must be either \"%s%s\" (\"-fFILE\") or           ",{}]],"26":[["     |      \"%s %s\" (\"-f FILE\"), because those are the two syntaxes that         ",{}]],"27":[["     |      Optik supports.                                                      ",{}]],"28":[["     |    _long_opt_fmt : str                                                    ",{}]],"29":[["     |      similar but for long options; must be either \"%s %s\" (\"--file FILE\") ",{}]],"30":[["     |      or \"%s=%s\" (\"--file=FILE\").                                          ",{}]],"31":[["     |                                                                           ",{}]],"32":[["     |  Methods defined here:                                                    ",{}]],"33":[["     |                                                                           ",{}]],"34":[["     |  ",{}],["__init__",{"bold":true}],["(self, indent_increment, max_help_position, width, short_first)  ",{}]],"35":[["     |                                                                           ",{}]],"36":[["     |  ",{}],["dedent",{"bold":true}],["(self)                                                             ",{}]],"38":[["     |  ",{}],["expand_default",{"bold":true}],["(self, option)                                             ",{}]],"39":[["     |                                                                           ",{}]],"40":[["     |  ",{}],["format_description",{"bold":true}],["(self, description)                                    ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.135706,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000614,{"lines":{"0":[["     |                                                                           ",{}]],"1":[["     |  ",{}],["format_epilog",{"bold":true}],["(self, epilog)                                              ",{}]],"2":[["     |                                                                           ",{}]],"3":[["     |  ",{}],["format_heading",{"bold":true}],["(self, heading)                                            ",{}]],"4":[["     |                                                                           ",{}]],"5":[["     |  ",{}],["format_option",{"bold":true}],["(self, option)                                              ",{}]],"6":[["     |                                                                           ",{}]],"7":[["     |  ",{}],["format_option_strings",{"bold":true}],["(self, option)                                      ",{}]],"8":[["     |      Return a comma-separated list of option strings & metavariables.     ",{}]],"9":[["     |                                                                           ",{}]],"10":[["     |  ",{}],["format_usage",{"bold":true}],["(self, usage)                                                ",{}]],"11":[["     |                                                                           ",{}]],"12":[["     |  ",{}],["indent",{"bold":true}],["(self)                                                             ",{}]],"13":[["     |                                                                           ",{}]],"14":[["     |  ",{}],["set_long_opt_delimiter",{"bold":true}],["(self, delim)                                      ",{}]],"15":[["     |                                                                           ",{}]],"16":[["     |  ",{}],["set_parser",{"bold":true}],["(self, parser)                                                 ",{}]],"17":[["     |                                                                           ",{}]],"18":[["     |  ",{}],["set_short_opt_delimiter",{"bold":true}],["(self, delim)                                     ",{}]],"19":[["     |                                                                           ",{}]],"20":[["     |  ",{}],["store_option_strings",{"bold":true}],["(self, parser)                                       ",{}]],"21":[["     |                                                                           ",{}]],"22":[["     |  ----------------------------------------------------------------------   ",{}]],"23":[["     |  Data and other attributes defined here:                                  ",{}]],"24":[["     |                                                                           ",{}]],"25":[["     |  ",{}],["NO_DEFAULT_VALUE",{"bold":true}],[" = 'none'                                                ",{}]],"26":[["                                                                                 ",{}]],"27":[["    class ",{}],["IndentedHelpFormatter",{"bold":true}],["(HelpFormatter)                                   ",{}]],"28":[["     |  Format help with indented section bodies.                                ",{}]],"29":[["     |                                                                           ",{}]],"30":[["     |  Methods defined here:                                                    ",{}]],"32":[["     |  ",{}],["__init__",{"bold":true}],["(self, indent_increment=2, max_help_position=24, width=None, shor",{}]],"33":[["t_first=1)                                                                       ",{}]],"34":[["     |                                                                           ",{}]],"35":[["     |  ",{}],["format_heading",{"bold":true}],["(self, heading)                                            ",{}]],"36":[["     |                                                                           ",{}]],"37":[["     |  ",{}],["format_usage",{"bold":true}],["(self, usage)                                                ",{}]],"38":[["     |                                                                           ",{}]],"39":[["     |  ----------------------------------------------------------------------   ",{}]],"40":[["     |  Methods inherited from HelpFormatter:                                    ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[0.135132,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000449,{"lines":{"1":[["     |  ",{}],["dedent",{"bold":true}],["(self)                                                             ",{}]],"3":[["     |  ",{}],["expand_default",{"bold":true}],["(self, option)                                             ",{}]],"5":[["     |  ",{}],["format_description",{"bold":true}],["(self, description)                                    ",{}]],"7":[["     |  ",{}],["format_epilog",{"bold":true}],["(self, epilog)                                              ",{}]],"8":[["     |                                                                           ",{}]],"9":[["     |  ",{}],["format_option",{"bold":true}],["(self, option)                                              ",{}]],"10":[["     |                                                                           ",{}]],"11":[["     |  ",{}],["format_option_strings",{"bold":true}],["(self, option)                                      ",{}]],"12":[["     |      Return a comma-separated list of option strings & metavariables.     ",{}]],"14":[["     |  ",{}],["indent",{"bold":true}],["(self)                                                             ",{}]],"16":[["     |  ",{}],["set_long_opt_delimiter",{"bold":true}],["(self, delim)                                      ",{}]],"18":[["     |  ",{}],["set_parser",{"bold":true}],["(self, parser)                                                 ",{}]],"20":[["     |  ",{}],["set_short_opt_delimiter",{"bold":true}],["(self, delim)                                     ",{}]],"22":[["     |  ",{}],["store_option_strings",{"bold":true}],["(self, parser)                                       ",{}]],"23":[["     |                                                                           ",{}]],"24":[["     |  ----------------------------------------------------------------------   ",{}]],"25":[["     |  Data and other attributes inherited from HelpFormatter:                  ",{}]],"26":[["     |                                                                           ",{}]],"27":[["     |  ",{}],["NO_DEFAULT_VALUE",{"bold":true}],[" = 'none'                                                ",{}]],"28":[["                                                                                 ",{}]],"29":[["    class ",{}],["OptParseError",{"bold":true}],["(exceptions.Exception)                                    ",{}]],"30":[["     |  Method resolution order:                                                 ",{}]],"31":[["     |      OptParseError                                                        ",{}]],"32":[["     |      exceptions.Exception                                                 ",{}]],"33":[["     |      exceptions.BaseException                                             ",{}]],"34":[["     |      __builtin__.object                                                   ",{}]],"35":[["     |                                                                           ",{}]],"36":[["     |  Methods defined here:                                                    ",{}]],"37":[["     |                                                                           ",{}]],"38":[["     |  ",{}],["__init__",{"bold":true}],["(self, msg)                                                      ",{}]],"39":[["     |                                                                           ",{}]],"40":[["     |  ",{}],["__str__",{"bold":true}],["(self)                                                            ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1}}],[1.77547,{"lines":{"0":[[">>> import optparse                                                              ",{}]],"1":[[">>> help(optparse)                                                               ",{}]],"2":[["                                                                                 ",{}]],"3":[["                                                                                 ",{}]],"4":[["                                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]],"8":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"10":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"18":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"24":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"27":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"30":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"33":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"36":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"38":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":0,"y":2}}],[0.000435,{"lines":{"3":[[">>>                                                                              ",{}]]},"cursor":{"x":4,"y":3}}],[0.472764,{"lines":{"3":[[">>> help(optparse)                                                               ",{}]]},"cursor":{"x":18}}],[0.679478,{"cursor":{"x":17}}],[0.464312,{"lines":{"3":[[">>> help(optparseO)                                                              ",{}]]},"cursor":{"x":18}}],[0.392015,{"lines":{"3":[[">>> help(optparse)                                                               ",{}]]},"cursor":{"x":17}}],[0.255823,{"lines":{"3":[[">>> help(optparse.)                                                              ",{}]]},"cursor":{"x":18}}],[0.296229,{"lines":{"3":[[">>> help(optparse.O)                                                             ",{}]]},"cursor":{"x":19}}],[0.200452,{"lines":{"3":[[">>> help(optparse.Op)                                                            ",{}]]},"cursor":{"x":20}}],[0.135585,{"lines":{"3":[[">>> help(optparse.Opt)                                                           ",{}]]},"cursor":{"x":21}}],[0.33596,{"lines":{"3":[[">>> help(optparse.OptP)                                                          ",{}]]},"cursor":{"x":22}}],[0.247778,{"lines":{"3":[[">>> help(optparse.OptPa)                                                         ",{}]]},"cursor":{"x":23}}],[0.488839,{"lines":{"3":[[">>> help(optparse.OptPar)                                                        ",{}]]},"cursor":{"x":24}}],[0.231572,{"lines":{"3":[[">>> help(optparse.OptPars)                                                       ",{}]]},"cursor":{"x":25}}],[0.103793,{"lines":{"3":[[">>> help(optparse.OptParse)                                                      ",{}]]},"cursor":{"x":26}}],[0.81604,{"lines":{"3":[[">>> help(optparse.OptParseE)                                                     ",{}]]},"cursor":{"x":27}}],[0.232513,{"lines":{"3":[[">>> help(optparse.OptParseEr)                                                    ",{}]]},"cursor":{"x":28}}],[0.136625,{"lines":{"3":[[">>> help(optparse.OptParseErr)                                                   ",{}]]},"cursor":{"x":29}}],[0.10387,{"lines":{"3":[[">>> help(optparse.OptParseErro)                                                  ",{}]]},"cursor":{"x":30}}],[0.103153,{"lines":{"3":[[">>> help(optparse.OptParseError)                                                 ",{}]]},"cursor":{"x":31}}],[1.192344,{"cursor":{"x":0,"y":4}}],[0.008656999999999998,{"lines":{"0":[["Help on class OptParseError in module optparse:                                  ",{}]],"1":[["                                                                                 ",{}]],"2":[["class ",{}],["OptParseError",{"bold":true}],["(exceptions.Exception)                                        ",{}]],"3":[[" |  Method resolution order:                                                     ",{}]],"4":[[" |      OptParseError                                                            ",{}]],"5":[[" |      exceptions.Exception                                                     ",{}]],"6":[[" |      exceptions.BaseException                                                 ",{}]],"7":[[" |      __builtin__.object                                                       ",{}]],"8":[[" |                                                                               ",{}]],"9":[[" |  Methods defined here:                                                        ",{}]],"10":[[" |                                                                               ",{}]],"11":[[" |  ",{}],["__init__",{"bold":true}],["(self, msg)                                                          ",{}]],"12":[[" |                                                                               ",{}]],"13":[[" |  ",{}],["__str__",{"bold":true}],["(self)                                                                ",{}]],"14":[[" |                                                                               ",{}]],"15":[[" |  ----------------------------------------------------------------------       ",{}]],"16":[[" |  Data descriptors defined here:                                               ",{}]],"17":[[" |                                                                               ",{}]],"18":[[" |  ",{}],["__weakref__",{"bold":true}],["                                                                  ",{}]],"19":[[" |      list of weak references to the object (if defined)                       ",{}]],"20":[[" |                                                                               ",{}]],"21":[[" |  ----------------------------------------------------------------------       ",{}]],"22":[[" |  Data and other attributes inherited from exceptions.Exception:               ",{}]],"23":[[" |                                                                               ",{}]],"24":[[" |  ",{}],["__new__",{"bold":true}],[" = <built-in method __new__ of type object>                           ",{}]],"25":[[" |      T.__new__(S, ...) -> a new object with type S, a subtype of T            ",{}]],"26":[[" |                                                                               ",{}]],"27":[[" |  ----------------------------------------------------------------------       ",{}]],"28":[[" |  Methods inherited from exceptions.BaseException:                             ",{}]],"29":[[" |                                                                               ",{}]],"30":[[" |  ",{}],["__delattr__",{"bold":true}],["(...)                                                             ",{}]],"31":[[" |      x.__delattr__('name') <==> del x.name                                    ",{}]],"32":[[" |                                                                               ",{}]],"33":[[" |  ",{}],["__getattribute__",{"bold":true}],["(...)                                                        ",{}]],"34":[[" |      x.__getattribute__('name') <==> x.name                                   ",{}]],"35":[[" |                                                                               ",{}]],"36":[[" |  ",{}],["__getitem__",{"bold":true}],["(...)                                                             ",{}]],"37":[[" |      x.__getitem__(y) <==> x[y]                                               ",{}]],"38":[[" |                                                                               ",{}]],"39":[[" |  ",{}],["__getslice__",{"bold":true}],["(...)                                                            ",{}]],"40":[[" |      x.__getslice__(i, j) <==> x[i:j]                                         ",{}]],"41":[[":                                                                                ",{}]]},"cursor":{"x":1,"y":41}}],[0.919452,{"lines":{"41":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000168,{"lines":{"0":[[" |                                                                               ",{}]],"1":[[" |  ",{}],["__new__",{"bold":true}],[" = <built-in method __new__ of type object>                           ",{}]],"2":[[" |      T.__new__(S, ...) -> a new object with type S, a subtype of T            ",{}]],"3":[[" |                                                                               ",{}]],"4":[[" |  ----------------------------------------------------------------------       ",{}]],"5":[[" |  Methods inherited from exceptions.BaseException:                             ",{}]],"6":[[" |                                                                               ",{}]],"7":[[" |  ",{}],["__delattr__",{"bold":true}],["(...)                                                             ",{}]],"8":[[" |      x.__delattr__('name') <==> del x.name                                    ",{}]],"9":[[" |                                                                               ",{}]],"10":[[" |  ",{}],["__getattribute__",{"bold":true}],["(...)                                                        ",{}]],"11":[[" |      x.__getattribute__('name') <==> x.name                                   ",{}]],"13":[[" |  ",{}],["__getitem__",{"bold":true}],["(...)                                                             ",{}]],"14":[[" |      x.__getitem__(y) <==> x[y]                                               ",{}]],"15":[[" |                                                                               ",{}]],"16":[[" |  ",{}],["__getslice__",{"bold":true}],["(...)                                                            ",{}]],"17":[[" |      x.__getslice__(i, j) <==> x[i:j]                                         ",{}]],"18":[[" |                                                                               ",{}]],"19":[[" |      Use of negative indices is not supported.                                ",{}]],"21":[[" |  ",{}],["__reduce__",{"bold":true}],["(...)                                                              ",{}]],"22":[[" |                                                                               ",{}]],"23":[[" |  ",{}],["__repr__",{"bold":true}],["(...)                                                                ",{}]],"24":[[" |      x.__repr__() <==> repr(x)                                                ",{}]],"25":[[" |                                                                               ",{}]],"26":[[" |  ",{}],["__setattr__",{"bold":true}],["(...)                                                             ",{}]],"27":[[" |      x.__setattr__('name', value) <==> x.name = value                         ",{}]],"28":[[" |                                                                               ",{}]],"29":[[" |  ",{}],["__setstate__",{"bold":true}],["(...)                                                            ",{}]],"30":[[" |                                                                               ",{}]],"31":[[" |  ",{}],["__unicode__",{"bold":true}],["(...)                                                             ",{}]],"33":[[" |  ----------------------------------------------------------------------       ",{}]],"34":[[" |  Data descriptors inherited from exceptions.BaseException:                    ",{}]],"36":[[" |  ",{}],["__dict__",{"bold":true}],["                                                                     ",{}]],"37":[[" |                                                                               ",{}]],"38":[[" |  ",{}],["args",{"bold":true}],["                                                                         ",{}]],"39":[[" |                                                                               ",{}]],"40":[[" |  ",{}],["message",{"bold":true}],["                                                                      ",{}]],"41":[["(END) ",{"inverse":true}],["                                                                           ",{}]]},"cursor":{"x":6}}],[0.13655,{}],[0.151036,{}],[0.416207,{"lines":{"0":[[">>> import optparse                                                              ",{}]],"1":[[">>> help(optparse)                                                               ",{}]],"2":[["                                                                                 ",{}]],"3":[[">>> help(optparse.OptParseError)                                                 ",{}]],"4":[["                                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]],"8":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"10":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"18":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]],"24":[["                                                                                 ",{}]],"25":[["                                                                                 ",{}]],"26":[["                                                                                 ",{}]],"27":[["                                                                                 ",{}]],"28":[["                                                                                 ",{}]],"29":[["                                                                                 ",{}]],"30":[["                                                                                 ",{}]],"31":[["                                                                                 ",{}]],"32":[["                                                                                 ",{}]],"33":[["                                                                                 ",{}]],"34":[["                                                                                 ",{}]],"35":[["                                                                                 ",{}]],"36":[["                                                                                 ",{}]],"37":[["                                                                                 ",{}]],"38":[["                                                                                 ",{}]],"39":[["                                                                                 ",{}]],"40":[["                                                                                 ",{}]],"41":[["                                                                                 ",{}]]},"cursor":{"x":0,"y":4}}],[0.000401,{"lines":{"5":[[">>>                                                                              ",{}]]},"cursor":{"x":4,"y":5}}],[1.415702,{"lines":{"5":[[">>> ^D                                                                           ",{}]]},"cursor":{"x":6}}],[0.005215,{"lines":{"6":[["vvv@batmobile:~$                                                                 ",{}]]},"cursor":{"x":17,"y":6}}],[2.339479,{"lines":{"6":[["vvv@batmobile:~$ exit                                                            ",{}]]},"cursor":{"x":0,"y":7}}]]